[
 {
  "name" : "d2d.Activity",
  "kind" : "module",
  "file" : "source/d2d/Activity.d",
  "comment" : " Activity\n",
  "members" : [
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "d2d",
    "kind" : "import",
    "line" : 7,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "Activity",
    "kind" : "class",
    "comment" : " An object that represents an Activity or a Screen or a point in time of the display\n Draws itself to the screen, can handle events, and can contain components which do the same\n Adding components to an activity ensures that they will automatically get handled as long as the activity is active\n",
    "line" : 14,
    "char" : 10,
    "interfaces" : [
     "d2d.sdl2.EventHandler.EventHandler"
    ],
    "members" : [
     {
      "name" : "components",
      "kind" : "variable",
      "comment" : "All the components that the screen contains; components are handled separately from the screen\n",
      "line" : 16,
      "char" : 17,
      "deco" : "AC3d2d9ComponentQk",
      "offset" : 24
     },
     {
      "name" : "container",
      "kind" : "variable",
      "protection" : "protected",
      "comment" : "The display that contains this screen\n",
      "line" : 17,
      "char" : 23,
      "deco" : "C3d2d7DisplayQi",
      "originalType" : "Display",
      "offset" : 40
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : " It may be useful for a screen to have access to it's containing display\n",
      "line" : 22,
      "char" : 5,
      "deco" : "FC3d2d7DisplayQiZCQq8ActivityQj",
      "originalType" : "(Display container)",
      "parameters" : [
       {
        "name" : "container",
        "deco" : "C3d2d7DisplayQi"
       }
      ],
      "endline" : 24,
      "endchar" : 5
     },
     {
      "name" : "handleEvent",
      "kind" : "function",
      "comment" : " How the screen should respond to events\n Is necessary because it is an event handler\n",
      "line" : 30,
      "char" : 10,
      "deco" : "FS8derelict4sdl28internal9sdl_types9SDL_EventZv",
      "parameters" : [
       {
        "name" : "event",
        "deco" : "S8derelict4sdl28internal9sdl_types9SDL_Event"
       }
      ],
      "endline" : 31,
      "endchar" : 5,
      "overrides" : [
       "d2d.sdl2.EventHandler.EventHandler.handleEvent"
      ]
     },
     {
      "name" : "draw",
      "kind" : "function",
      "comment" : " How the screen should be drawn\n Drawing of screen components is handled after this method\n",
      "line" : 37,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 38,
      "endchar" : 5
     },
     {
      "name" : "update",
      "kind" : "function",
      "comment" : " What the screen should do every screen update\n If the renderer is on VSync, update may be called more than once per actual frame\n Can be treated as the insides of a while(true) loop\n",
      "line" : 45,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 46,
      "endchar" : 5
     }
    ]
   }
  ]
 },
 {
  "name" : "d2d.Button",
  "kind" : "module",
  "file" : "source/d2d/Button.d",
  "comment" : " Button\n",
  "members" : [
   {
    "name" : "d2d",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "Button",
    "kind" : "class",
    "comment" : " A predefined component that may be used as one would normally expect\n Ensures that the mouse was clicked and released over the button\n Button doesn't handle timing of press or anything like that\n",
    "line" : 13,
    "char" : 10,
    "base" : "d2d.Component.Component",
    "members" : [
     {
      "name" : "_isClicked",
      "kind" : "variable",
      "protection" : "private",
      "comment" : "An internally used flag to store whether the mouse has clicked (not released) over the button\n",
      "line" : 15,
      "char" : 18,
      "deco" : "b",
      "offset" : 32
     },
     {
      "name" : "_location",
      "kind" : "variable",
      "comment" : "Where the button is on the screen\n",
      "line" : 16,
      "char" : 16,
      "deco" : "C3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBl",
      "originalType" : "iRectangle",
      "offset" : 40
     },
     {
      "name" : "isClicked",
      "kind" : "function",
      "comment" : " Gets whether the mouse button is held down over this button\n",
      "line" : 21,
      "char" : 20,
      "deco" : "FNdZb",
      "endline" : 23,
      "endchar" : 5
     },
     {
      "name" : "isHovered",
      "kind" : "function",
      "comment" : " Gets whether the mouse is hovering over this button\n",
      "line" : 28,
      "char" : 20,
      "deco" : "FNdZb",
      "endline" : 30,
      "endchar" : 5
     },
     {
      "name" : "location",
      "kind" : "function",
      "comment" : " Gets where the button is on the screen\n",
      "line" : 35,
      "char" : 35,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdZC3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBl",
      "originalType" : "@property iRectangle()",
      "endline" : 37,
      "endchar" : 5,
      "overrides" : [
       "d2d.Component.Component.location"
      ]
     },
     {
      "name" : "location",
      "kind" : "function",
      "comment" : " Sets where the button is on the screen\n",
      "line" : 42,
      "char" : 20,
      "deco" : "FNdC3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBlZv",
      "originalType" : "@property void(iRectangle newLocation)",
      "parameters" : [
       {
        "name" : "newLocation",
        "deco" : "C3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBl"
       }
      ],
      "endline" : 44,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : " Makes a button given its location\n",
      "line" : 49,
      "char" : 5,
      "deco" : "FC3d2d7DisplayQiCQp4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBlZCQCm6ButtonQh",
      "originalType" : "(Display container, iRectangle location)",
      "parameters" : [
       {
        "name" : "container",
        "deco" : "C3d2d7DisplayQi"
       },
       {
        "name" : "location",
        "deco" : "C3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBl"
       }
      ],
      "endline" : 52,
      "endchar" : 5
     },
     {
      "name" : "handleEvent",
      "kind" : "function",
      "comment" : " How the button determines when it has been pressed\n Collects events and if the events signify the button has been pressed, calls the button's action\n",
      "line" : 58,
      "char" : 10,
      "deco" : "FS8derelict4sdl28internal9sdl_types9SDL_EventZv",
      "parameters" : [
       {
        "name" : "event",
        "deco" : "S8derelict4sdl28internal9sdl_types9SDL_Event"
       }
      ],
      "endline" : 70,
      "endchar" : 5
     },
     {
      "name" : "action",
      "kind" : "function",
      "line" : 72,
      "char" : 10,
      "deco" : "FZv"
     }
    ]
   }
  ]
 },
 {
  "name" : "d2d.Component",
  "kind" : "module",
  "file" : "source/d2d/Component.d",
  "comment" : " Component\n",
  "members" : [
   {
    "name" : "d2d",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "Component",
    "kind" : "class",
    "comment" : " A component defines something that can be drawn, handle events, and takes up a space on the screen\n",
    "line" : 11,
    "char" : 10,
    "interfaces" : [
     "d2d.sdl2.EventHandler.EventHandler"
    ],
    "members" : [
     {
      "name" : "container",
      "kind" : "variable",
      "protection" : "protected",
      "comment" : "The display that contains this component\n",
      "line" : 13,
      "char" : 23,
      "deco" : "C3d2d7DisplayQi",
      "originalType" : "Display",
      "offset" : 24
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : " It may be useful for a component to have access to it's containing display\n",
      "line" : 18,
      "char" : 5,
      "deco" : "FC3d2d7DisplayQiZCQq9ComponentQk",
      "originalType" : "(Display container)",
      "parameters" : [
       {
        "name" : "container",
        "deco" : "C3d2d7DisplayQi"
       }
      ],
      "endline" : 20,
      "endchar" : 5
     },
     {
      "name" : "location",
      "kind" : "function",
      "comment" : "Gets where the component is on the screen\n",
      "line" : 22,
      "char" : 26,
      "deco" : "FNdZC3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBl",
      "originalType" : "@property iRectangle()"
     },
     {
      "name" : "draw",
      "kind" : "function",
      "comment" : "How the component should draw itself on the screen\n",
      "line" : 23,
      "char" : 10,
      "deco" : "FZv"
     }
    ]
   }
  ]
 },
 {
  "name" : "d2d.ComponentGroup",
  "kind" : "module",
  "file" : "source/d2d/ComponentGroup.d",
  "comment" : " Component Group\n",
  "members" : [
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "d2d",
    "kind" : "import",
    "line" : 7,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "ComponentGroup",
    "kind" : "class",
    "comment" : " A ComponentGroup is just a way of grouping a bunch of related components into one singular group\n From there, a ComponentGroup functions exactly as any other normal component would\n Unexpected behaviour may stem if the components in the component group aren't all of the same Display\n",
    "line" : 14,
    "char" : 1,
    "base" : "d2d.Component.Component",
    "members" : [
     {
      "name" : "subComponents",
      "kind" : "variable",
      "comment" : "The components that are in this ComponentGroup\n",
      "line" : 16,
      "char" : 17,
      "deco" : "AC3d2d9ComponentQk",
      "offset" : 32
     },
     {
      "name" : "location",
      "kind" : "function",
      "comment" : " Gets the location of this group as the smallest rectangle that contains all components\n",
      "line" : 21,
      "char" : 35,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdZC3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBl",
      "originalType" : "@property iRectangle()",
      "endline" : 40,
      "endchar" : 5,
      "overrides" : [
       "d2d.Component.Component.location"
      ]
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : " Creates a ComponentGroup given the component-required Display as well as what sub components are in the group\n Unexpected behaviour may stem if the components in the component group aren't all of the same Display\n",
      "line" : 46,
      "char" : 5,
      "deco" : "FC3d2d7DisplayQiACQq9ComponentQkZCQBg14ComponentGroupQq",
      "originalType" : "(Display container, Component[] subComponents)",
      "parameters" : [
       {
        "name" : "container",
        "deco" : "C3d2d7DisplayQi"
       },
       {
        "name" : "subComponents",
        "deco" : "AC3d2d9ComponentQk"
       }
      ],
      "endline" : 49,
      "endchar" : 5
     },
     {
      "name" : "handleEvent",
      "kind" : "function",
      "comment" : " The group handles events by sending events to the sub components\n Components recieve events in the same order they are in the group\n",
      "line" : 55,
      "char" : 10,
      "deco" : "FS8derelict4sdl28internal9sdl_types9SDL_EventZv",
      "parameters" : [
       {
        "name" : "event",
        "deco" : "S8derelict4sdl28internal9sdl_types9SDL_Event"
       }
      ],
      "endline" : 57,
      "endchar" : 5
     },
     {
      "name" : "draw",
      "kind" : "function",
      "comment" : " The group handles drawing by just drawing all of the sub components\n Components are drawn in the order they are in the group; later components go on top of earlier components\n",
      "line" : 63,
      "char" : 19,
      "storageClass" : [
       "override"
      ],
      "deco" : "FZv",
      "endline" : 65,
      "endchar" : 5,
      "overrides" : [
       "d2d.Component.Component.draw"
      ]
     }
    ]
   }
  ]
 },
 {
  "name" : "d2d.Display",
  "kind" : "module",
  "file" : "source/d2d/Display.d",
  "comment" : " Display\n",
  "members" : [
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 7,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.datetime.stopwatch",
    "kind" : "import",
    "line" : 8,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "core.thread",
    "kind" : "import",
    "line" : 9,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "d2d",
    "kind" : "import",
    "line" : 10,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "d2d.sdl2",
    "kind" : "import",
    "line" : 11,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "Display",
    "kind" : "class",
    "comment" : " A display that handles collecting events and drawing to the activity and handling window stuff\n Will handle the main loop and send events to where they need to be handled\n",
    "line" : 17,
    "char" : 1,
    "members" : [
     {
      "name" : "frameSleep",
      "kind" : "variable",
      "comment" : "How long to wait between frames in milliseconds; will be ignored in case of VSync\n",
      "line" : 19,
      "char" : 9,
      "deco" : "i",
      "init" : "16",
      "offset" : 16
     },
     {
      "name" : "isRunning",
      "kind" : "variable",
      "comment" : "Whether the display is running; will stop running if set to false\n",
      "line" : 20,
      "char" : 10,
      "deco" : "b",
      "offset" : 20
     },
     {
      "name" : "activity",
      "kind" : "variable",
      "comment" : "The activity that the display is displaying right now\n",
      "line" : 21,
      "char" : 14,
      "deco" : "C3d2d8ActivityQj",
      "originalType" : "Activity",
      "offset" : 24
     },
     {
      "name" : "eventHandlers",
      "kind" : "variable",
      "comment" : "All event handlers of the display; define specific behaviours for events; events pass to handlers from first to last\n",
      "line" : 22,
      "char" : 20,
      "deco" : "AC3d2d4sdl212EventHandlerQo",
      "offset" : 32
     },
     {
      "name" : "_frames",
      "kind" : "variable",
      "protection" : "private",
      "comment" : "How many frames have passed\n",
      "line" : 23,
      "char" : 19,
      "deco" : "m",
      "offset" : 48
     },
     {
      "name" : "_keyboard",
      "kind" : "variable",
      "protection" : "private",
      "comment" : "The keyboard input source\n",
      "line" : 24,
      "char" : 22,
      "deco" : "C3d2d4sdl28KeyboardQj",
      "originalType" : "Keyboard",
      "offset" : 56
     },
     {
      "name" : "_mouse",
      "kind" : "variable",
      "protection" : "private",
      "comment" : "The mouse input source\n",
      "line" : 25,
      "char" : 19,
      "deco" : "C3d2d4sdl25MouseQg",
      "originalType" : "Mouse",
      "offset" : 64
     },
     {
      "name" : "_window",
      "kind" : "variable",
      "protection" : "private",
      "comment" : "The actual SDL window\n",
      "line" : 26,
      "char" : 20,
      "deco" : "C3d2d4sdl26WindowQh",
      "originalType" : "Window",
      "offset" : 72
     },
     {
      "name" : "_renderer",
      "kind" : "variable",
      "protection" : "private",
      "comment" : "The renderer for the window\n",
      "line" : 27,
      "char" : 22,
      "deco" : "C3d2d4sdl28RendererQj",
      "originalType" : "Renderer",
      "offset" : 80
     },
     {
      "name" : "framerate",
      "kind" : "function",
      "comment" : " Sets the window's framerate\n",
      "line" : 32,
      "char" : 20,
      "deco" : "FNdiZv",
      "parameters" : [
       {
        "name" : "fps",
        "deco" : "i"
       }
      ],
      "endline" : 34,
      "endchar" : 5
     },
     {
      "name" : "framerate",
      "kind" : "function",
      "comment" : " Gets the window's framerate\n",
      "line" : 39,
      "char" : 19,
      "deco" : "FNdZi",
      "endline" : 41,
      "endchar" : 5
     },
     {
      "name" : "frames",
      "kind" : "function",
      "comment" : " Gets how many frames have passed since the window started\n",
      "line" : 46,
      "char" : 21,
      "deco" : "FNdZm",
      "endline" : 48,
      "endchar" : 5
     },
     {
      "name" : "keyboard",
      "kind" : "function",
      "comment" : " Gets the keyboard of the display\n",
      "line" : 53,
      "char" : 24,
      "deco" : "FNdZC3d2d4sdl28KeyboardQj",
      "endline" : 55,
      "endchar" : 5
     },
     {
      "name" : "mouse",
      "kind" : "function",
      "comment" : " Gets the mouse of the display\n",
      "line" : 60,
      "char" : 21,
      "deco" : "FNdZC3d2d4sdl25MouseQg",
      "endline" : 62,
      "endchar" : 5
     },
     {
      "name" : "window",
      "kind" : "function",
      "comment" : " Gets the window of the display\n",
      "line" : 67,
      "char" : 22,
      "deco" : "FNdZC3d2d4sdl26WindowQh",
      "endline" : 69,
      "endchar" : 5
     },
     {
      "name" : "renderer",
      "kind" : "function",
      "comment" : " Gets the contained window's renderer\n",
      "line" : 74,
      "char" : 24,
      "deco" : "FNdZC3d2d4sdl28RendererQj",
      "endline" : 76,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : " Constructs a display given a width, height, window flags, renderer flags, a title, and a path for an image icon (or null)\n Disregarding width and height, constructor asks for flags first because once set, those cannot be changed\n",
      "line" : 82,
      "char" : 5,
      "deco" : "FiiE8derelict4sdl28internal9sdl_types15SDL_WindowFlagskAyaQdZC3d2d7DisplayQi",
      "originalType" : "(int w, int h, SDL_WindowFlags flags = SDL_WINDOW_SHOWN, uint rendererFlags = 0, string title = \"\", string iconPath = null)",
      "parameters" : [
       {
        "name" : "w",
        "deco" : "i"
       },
       {
        "name" : "h",
        "deco" : "i"
       },
       {
        "name" : "flags",
        "deco" : "E8derelict4sdl28internal9sdl_types15SDL_WindowFlags",
        "default" : "cast(SDL_WindowFlags)4"
       },
       {
        "name" : "rendererFlags",
        "deco" : "k",
        "default" : "0u"
       },
       {
        "name" : "title",
        "deco" : "Aya",
        "default" : "\"\""
       },
       {
        "name" : "iconPath",
        "deco" : "Aya",
        "default" : "null"
       }
      ],
      "endline" : 91,
      "endchar" : 5
     },
     {
      "name" : "run",
      "kind" : "function",
      "comment" : " Actually runs the display and handles event collection and framerate and most other things\n",
      "line" : 96,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 135,
      "endchar" : 5
     }
    ]
   }
  ]
 },
 {
  "name" : "source.d2d.ProgressBar",
  "kind" : "module",
  "file" : "source/d2d/ProgressBar.d",
  "members" : [
   {
    "name" : "d2d",
    "kind" : "import",
    "line" : 3,
    "char" : 8,
    "protection" : "private"
   },
   {
    "kind" : "template",
    "comment" : " A progress bar to be displayed at any point on the screen\n Fills from left to right its progress\n TODO: allow bar direction to be modified\n",
    "line" : 10,
    "char" : 1,
    "name" : "ProgressBar",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "ProgressBar",
      "kind" : "class",
      "line" : 10,
      "char" : 1,
      "members" : [
       {
        "name" : "_location",
        "kind" : "variable",
        "comment" : "The location and dimensions of the bar\n",
        "line" : 12,
        "char" : 16,
        "type" : "iRectangle"
       },
       {
        "name" : "maxVal",
        "kind" : "variable",
        "comment" : "The maximum value of the quantity measured\n",
        "line" : 13,
        "char" : 7,
        "type" : "T"
       },
       {
        "name" : "currentVal",
        "kind" : "variable",
        "comment" : "The current value of the quantity measured\n",
        "line" : 14,
        "char" : 7,
        "type" : "T"
       },
       {
        "name" : "backColor",
        "kind" : "variable",
        "comment" : "The background color of the bar\n",
        "line" : 15,
        "char" : 11,
        "type" : "Color"
       },
       {
        "name" : "foreColor",
        "kind" : "variable",
        "comment" : "The forground color of the bar\n",
        "line" : 16,
        "char" : 11,
        "type" : "Color"
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "comment" : " Constructs a new health bar at the given location with the given values\n",
        "line" : 21,
        "char" : 5,
        "type" : "(Display container, iRectangle location, Color backColor, Color foreColor, T maxVal, T currentVal = 0)",
        "parameters" : [
         {
          "name" : "container",
          "type" : "Display"
         },
         {
          "name" : "location",
          "type" : "iRectangle"
         },
         {
          "name" : "backColor",
          "type" : "Color"
         },
         {
          "name" : "foreColor",
          "type" : "Color"
         },
         {
          "name" : "maxVal",
          "type" : "T"
         },
         {
          "name" : "currentVal",
          "type" : "T",
          "default" : "0"
         }
        ],
        "endline" : 29,
        "endchar" : 5
       },
       {
        "name" : "location",
        "kind" : "function",
        "comment" : " Returns the location of the progress bar\n",
        "line" : 34,
        "char" : 35,
        "storageClass" : [
         "override"
        ],
        "type" : "@property iRectangle()",
        "endline" : 36,
        "endchar" : 5
       },
       {
        "name" : "location",
        "kind" : "function",
        "comment" : " Sets the location of the progress bar\n",
        "line" : 41,
        "char" : 29,
        "storageClass" : [
         "override"
        ],
        "type" : "@property void(iRectangle newLocation)",
        "parameters" : [
         {
          "name" : "newLocation",
          "type" : "iRectangle"
         }
        ],
        "endline" : 43,
        "endchar" : 5
       },
       {
        "name" : "draw",
        "kind" : "function",
        "comment" : " Draws the progress bar to the screen\n",
        "line" : 48,
        "char" : 19,
        "storageClass" : [
         "override"
        ],
        "type" : "void()",
        "endline" : 54,
        "endchar" : 5
       }
      ]
     }
    ]
   }
  ]
 },
 {
  "kind" : "module",
  "file" : "source/d2d/app.d",
  "members" : [
   {
    "name" : "d2d",
    "kind" : "import",
    "line" : 1,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.math",
    "kind" : "import",
    "line" : 2,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "main",
    "kind" : "function",
    "line" : 4,
    "char" : 6,
    "deco" : "FZv",
    "endline" : 53,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "d2d.math.AxisAlignedBoundingBox",
  "kind" : "module",
  "file" : "source/d2d/math/AxisAlignedBoundingBox.d",
  "comment" : " Axis Aligned Bounding Box\n",
  "members" : [
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.math",
    "kind" : "import",
    "line" : 7,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.parallelism",
    "kind" : "import",
    "line" : 8,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 9,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.traits",
    "kind" : "import",
    "line" : 10,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "d2d.math.Segment",
    "kind" : "import",
    "line" : 11,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "d2d.math.Vector",
    "kind" : "import",
    "line" : 12,
    "char" : 8,
    "protection" : "private"
   },
   {
    "kind" : "template",
    "comment" : " A rectangle is a box in 2d space\n Because these rectangles are axis aligned, they don't have any rotation\n",
    "line" : 18,
    "char" : 1,
    "name" : "AxisAlignedBoundingBox",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     },
     {
      "name" : "dimensions",
      "kind" : "value",
      "deco" : "k"
     }
    ],
    "members" : [
     {
      "name" : "AxisAlignedBoundingBox",
      "kind" : "class",
      "line" : 18,
      "char" : 1,
      "members" : [
       {
        "name" : "initialPoint",
        "kind" : "variable",
        "comment" : "The initial or starting point of the AABB\n",
        "line" : 20,
        "char" : 28,
        "type" : "Vector!(T, dimensions)"
       },
       {
        "name" : "extent",
        "kind" : "variable",
        "comment" : "The extent in each direction the AABB extends from the initial point (eg.)\n",
        "line" : 21,
        "char" : 28,
        "type" : "Vector!(T, dimensions)"
       },
       {
        "name" : "vertices",
        "kind" : "function",
        "comment" : " Gets all the vertices of the AABB\n",
        "line" : 51,
        "char" : 40,
        "type" : "@property Vector!(T, dimensions)[]()",
        "endline" : 74,
        "endchar" : 5
       },
       {
        "name" : "edges",
        "kind" : "function",
        "comment" : " Gets all the edges of the AABB\n",
        "line" : 79,
        "char" : 41,
        "type" : "@property Segment!(T, dimensions)[]()",
        "endline" : 99,
        "endchar" : 5
       },
       {
        "name" : "center",
        "kind" : "function",
        "comment" : " Gets the point that is the middle or center of the AABB\n",
        "line" : 104,
        "char" : 38,
        "type" : "@property Vector!(T, dimensions)()",
        "endline" : 106,
        "endchar" : 5
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "comment" : " Creates an AABB from the initial point, and how much in each direction the box extends\n",
        "line" : 111,
        "char" : 5,
        "type" : "(Vector!(T, dimensions) initialPoint, Vector!(T, dimensions) extent)",
        "parameters" : [
         {
          "name" : "initialPoint",
          "type" : "Vector!(T, dimensions)"
         },
         {
          "name" : "extent",
          "type" : "Vector!(T, dimensions)"
         }
        ],
        "endline" : 114,
        "endchar" : 5
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "comment" : " Creates an AABB from the same as the vector constructor, but as a varargs input\n",
        "line" : 119,
        "char" : 5,
        "type" : "(T[] args...)",
        "parameters" : [
         {
          "name" : "args",
          "type" : "T[]"
         }
        ],
        "endline" : 126,
        "endchar" : 5
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "comment" : " Copy constructor for AABBs\n",
        "line" : 131,
        "char" : 5,
        "type" : "(AxisAlignedBoundingBox!(T, dimensions) toCopy)",
        "parameters" : [
         {
          "name" : "toCopy",
          "type" : "AxisAlignedBoundingBox!(T, dimensions)"
         }
        ],
        "endline" : 134,
        "endchar" : 5
       },
       {
        "name" : "contains",
        "kind" : "function",
        "comment" : " Returns whether the box contains the given point\n",
        "line" : 139,
        "char" : 10,
        "type" : "bool(Vector!(T, dimensions) point)",
        "parameters" : [
         {
          "name" : "point",
          "type" : "Vector!(T, dimensions)"
         }
        ],
        "endline" : 148,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "comment" : " Returns whether two rectangles intersect\n",
    "line" : 155,
    "char" : 6,
    "name" : "intersects",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "constraint" : "is(T : AxisAlignedBoundingBox!V, V...)",
    "members" : [
     {
      "name" : "intersects",
      "kind" : "function",
      "line" : 155,
      "char" : 6,
      "type" : "bool(T first, T second)",
      "parameters" : [
       {
        "name" : "first",
        "type" : "T"
       },
       {
        "name" : "second",
        "type" : "T"
       }
      ],
      "endline" : 170,
      "endchar" : 1
     }
    ]
   }
  ]
 },
 {
  "name" : "d2d.math.BezierCurve",
  "kind" : "module",
  "file" : "source/d2d/math/BezierCurve.d",
  "comment" : " Bezier Curve\n",
  "members" : [
   {
    "name" : "d2d.math.Vector",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "kind" : "template",
    "comment" : " A class that represents a Bezier Curve\n Supposedly the most visually appealing curves\n Needs a lot of complicated math; this class doesn't have much functionality other than what one might need to draw it\n",
    "line" : 13,
    "char" : 1,
    "name" : "BezierCurve",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     },
     {
      "name" : "dimensions",
      "kind" : "value",
      "deco" : "k"
     }
    ],
    "members" : [
     {
      "name" : "BezierCurve",
      "kind" : "class",
      "line" : 13,
      "char" : 1,
      "members" : [
       {
        "name" : "controlPoints",
        "kind" : "variable",
        "comment" : "The points that control the path of the curve; usually don't actually exist on curve\n",
        "line" : 15,
        "char" : 30,
        "type" : "Vector!(T, dimensions)[]"
       },
       {
        "kind" : "template",
        "comment" : " Gets numPoints amount of points that are on the bezier curve evenly spaced from the beginning point to the end point (t 0 => 1)\n",
        "line" : 20,
        "char" : 39,
        "name" : "getPoints",
        "parameters" : [
         {
          "name" : "numPoints",
          "kind" : "value",
          "deco" : "k"
         }
        ],
        "members" : [
         {
          "name" : "getPoints",
          "kind" : "function",
          "line" : 20,
          "char" : 39,
          "type" : "Vector!(T, dimensions)[numPoints]()",
          "endline" : 36,
          "endchar" : 5
         }
        ]
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "comment" : " Creates a bezier curve given a list of control points\n",
        "line" : 41,
        "char" : 5,
        "type" : "(Vector!(T, dimensions)[] cPoints...)",
        "parameters" : [
         {
          "name" : "cPoints",
          "type" : "Vector!(T, dimensions)[]"
         }
        ],
        "endline" : 43,
        "endchar" : 5
       }
      ]
     }
    ]
   }
  ]
 },
 {
  "name" : "d2d.math.Matrix",
  "kind" : "module",
  "file" : "source/d2d/math/Matrix.d",
  "comment" : " Matrix\n",
  "members" : [
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 7,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.math",
    "kind" : "import",
    "line" : 8,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.parallelism",
    "kind" : "import",
    "line" : 9,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "d2d.math",
    "kind" : "import",
    "line" : 10,
    "char" : 8,
    "protection" : "private"
   },
   {
    "kind" : "template",
    "comment" : " A matrix is just like a mathematical matrix where it is similar to essentially a 2d array of of the given type\n Template parameters are the type, how many rows, and how many columns\n TODO: rref, frustums, transformations\n",
    "line" : 17,
    "char" : 1,
    "name" : "Matrix",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     },
     {
      "name" : "rows",
      "kind" : "value",
      "deco" : "k"
     },
     {
      "name" : "columns",
      "kind" : "value",
      "deco" : "k"
     }
    ],
    "members" : [
     {
      "name" : "Matrix",
      "kind" : "class",
      "line" : 17,
      "char" : 1,
      "members" : [
       {
        "name" : "elements",
        "kind" : "variable",
        "comment" : "The elements of the matrix; stored as an array of rows (i.e. row vectors)\n",
        "line" : 19,
        "char" : 22,
        "type" : "T[columns][rows]"
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "comment" : " Constructs a matrix from a two-dimensional array of elements\n",
        "line" : 58,
        "char" : 5,
        "type" : "(T[][] elements)",
        "parameters" : [
         {
          "name" : "elements",
          "type" : "T[][]"
         }
        ],
        "endline" : 64,
        "endchar" : 5
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "comment" : " Constructs a matrix from a two-dimensional array of elements\n",
        "line" : 69,
        "char" : 5,
        "type" : "(T[columns][rows] elements)",
        "parameters" : [
         {
          "name" : "elements",
          "type" : "T[columns][rows]"
         }
        ],
        "endline" : 71,
        "endchar" : 5
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "comment" : " Constructs a matrix that is identically one value\n",
        "line" : 76,
        "char" : 5,
        "type" : "(T element)",
        "parameters" : [
         {
          "name" : "element",
          "type" : "T"
         }
        ],
        "endline" : 79,
        "endchar" : 5
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "comment" : " Constructs a matrix as an identity matrix\n",
        "line" : 84,
        "char" : 5,
        "type" : "()",
        "endline" : 89,
        "endchar" : 5
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "comment" : " Copy constructor for a matrix; creates a copy of the given matrix\n",
        "line" : 94,
        "char" : 5,
        "type" : "(Matrix!(T, rows, columns) toCopy)",
        "parameters" : [
         {
          "name" : "toCopy",
          "type" : "Matrix!(T, rows, columns)"
         }
        ],
        "endline" : 96,
        "endchar" : 5
       },
       {
        "name" : "setRow",
        "kind" : "function",
        "comment" : " Sets the nth row of the matrix\n",
        "line" : 101,
        "char" : 10,
        "type" : "void(uint index, Vector!(T, columns) r)",
        "parameters" : [
         {
          "name" : "index",
          "deco" : "k"
         },
         {
          "name" : "r",
          "type" : "Vector!(T, columns)"
         }
        ],
        "endline" : 103,
        "endchar" : 5
       },
       {
        "name" : "getRow",
        "kind" : "function",
        "comment" : " Returns the nth row of the matrix\n",
        "line" : 108,
        "char" : 25,
        "type" : "Vector!(T, columns)(uint index)",
        "parameters" : [
         {
          "name" : "index",
          "deco" : "k"
         }
        ],
        "endline" : 110,
        "endchar" : 5
       },
       {
        "name" : "setColumn",
        "kind" : "function",
        "comment" : " Sets the nth column of the matrix\n",
        "line" : 115,
        "char" : 10,
        "type" : "void(uint index, Vector!(T, rows) c)",
        "parameters" : [
         {
          "name" : "index",
          "deco" : "k"
         },
         {
          "name" : "c",
          "type" : "Vector!(T, rows)"
         }
        ],
        "endline" : 119,
        "endchar" : 5
       },
       {
        "name" : "getColumn",
        "kind" : "function",
        "comment" : " Returns the nth column of the matrix\n",
        "line" : 124,
        "char" : 22,
        "type" : "Vector!(T, rows)(uint index)",
        "parameters" : [
         {
          "name" : "index",
          "deco" : "k"
         }
        ],
        "endline" : 130,
        "endchar" : 5
       },
       {
        "name" : "opAssign",
        "kind" : "function",
        "comment" : " Allows assigning the matrix to a static two-dimensional array to set all components of the matrix\n",
        "line" : 135,
        "char" : 10,
        "type" : "void(T[][] rhs)",
        "parameters" : [
         {
          "name" : "rhs",
          "type" : "T[][]"
         }
        ],
        "endline" : 141,
        "endchar" : 5
       },
       {
        "name" : "opAssign",
        "kind" : "function",
        "comment" : " Allows assigning the matrix to a static two-dimensional array to set all components of the matrix\n",
        "line" : 146,
        "char" : 10,
        "type" : "void(T[columns][rows] rhs)",
        "parameters" : [
         {
          "name" : "rhs",
          "type" : "T[columns][rows]"
         }
        ],
        "endline" : 148,
        "endchar" : 5
       },
       {
        "name" : "opAssign",
        "kind" : "function",
        "comment" : " Allows assigning the matrix to a single value to set all elements of the matrix to such a value\n",
        "line" : 153,
        "char" : 10,
        "type" : "void(T rhs)",
        "parameters" : [
         {
          "name" : "rhs",
          "type" : "T"
         }
        ],
        "endline" : 156,
        "endchar" : 5
       }
      ]
     }
    ]
   }
  ]
 },
 {
  "name" : "d2d.math.Segment",
  "kind" : "module",
  "file" : "source/d2d/math/Segment.d",
  "comment" : " Segment\n",
  "members" : [
   {
    "name" : "std.math",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.parallelism",
    "kind" : "import",
    "line" : 7,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "d2d.math.AxisAlignedBoundingBox",
    "kind" : "import",
    "line" : 8,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "d2d.math.Vector",
    "kind" : "import",
    "line" : 9,
    "char" : 8,
    "protection" : "private"
   },
   {
    "kind" : "template",
    "comment" : " A segment class that is defined by two\n",
    "line" : 14,
    "char" : 1,
    "name" : "Segment",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     },
     {
      "name" : "dimensions",
      "kind" : "value",
      "deco" : "k"
     }
    ],
    "members" : [
     {
      "name" : "Segment",
      "kind" : "class",
      "line" : 14,
      "char" : 1,
      "members" : [
       {
        "name" : "initial",
        "kind" : "variable",
        "comment" : "The initial point (the vector points to the initial point)\n",
        "line" : 16,
        "char" : 28,
        "type" : "Vector!(T, dimensions)"
       },
       {
        "name" : "terminal",
        "kind" : "variable",
        "comment" : "The terminal point (the vector points to the terminal point)\n",
        "line" : 17,
        "char" : 28,
        "type" : "Vector!(T, dimensions)"
       },
       {
        "name" : "direction",
        "kind" : "function",
        "comment" : " Returns the direction of the segment from initial to terminal\n",
        "line" : 22,
        "char" : 38,
        "type" : "@property Vector!(T, dimensions)()",
        "endline" : 24,
        "endchar" : 5
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "comment" : " Constructor for a segment;\n Takes in the initial point and the terminal point\n",
        "line" : 30,
        "char" : 5,
        "type" : "(Vector!(T, dimensions) initial, Vector!(T, dimensions) terminal)",
        "parameters" : [
         {
          "name" : "initial",
          "type" : "Vector!(T, dimensions)"
         },
         {
          "name" : "terminal",
          "type" : "Vector!(T, dimensions)"
         }
        ],
        "endline" : 33,
        "endchar" : 5
       },
       {
        "kind" : "template",
        "comment" : " Returns whether this segment contains the other point\n Checks that a segment from origin to point has magnitude between initial and terminal's magnitude\n Also checks that when point magnitude is 1 and direction magnitude is 1, they have the same or they have negated components\n",
        "line" : 40,
        "char" : 10,
        "name" : "contains",
        "parameters" : [
         {
          "name" : "T",
          "kind" : "type"
         }
        ],
        "members" : [
         {
          "name" : "contains",
          "kind" : "function",
          "line" : 40,
          "char" : 10,
          "type" : "bool(Vector!(T, dimensions) point)",
          "parameters" : [
           {
            "name" : "point",
            "type" : "Vector!(T, dimensions)"
           }
          ],
          "endline" : 53,
          "endchar" : 5
         }
        ]
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "comment" : " TODO: Returns where two segments intersect; if they don't intersect, returns null; needs rref of matrix to be completed first\n",
    "line" : 60,
    "char" : 24,
    "name" : "interesction",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     },
     {
      "name" : "dimensions",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "interesction",
      "kind" : "function",
      "line" : 60,
      "char" : 24,
      "type" : "Vector!(T, dimensions)(Segment!(T, dimensions) first, Segment!(T, dimensions) second)",
      "parameters" : [
       {
        "name" : "first",
        "type" : "Segment!(T, dimensions)"
       },
       {
        "name" : "second",
        "type" : "Segment!(T, dimensions)"
       }
      ],
      "endline" : 68,
      "endchar" : 1
     }
    ]
   }
  ]
 },
 {
  "name" : "d2d.math.Vector",
  "kind" : "module",
  "file" : "source/d2d/math/Vector.d",
  "comment" : " Vector\n",
  "members" : [
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 7,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 8,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.math",
    "kind" : "import",
    "line" : 9,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.parallelism",
    "kind" : "import",
    "line" : 10,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.traits",
    "kind" : "import",
    "line" : 11,
    "char" : 8,
    "protection" : "private"
   },
   {
    "kind" : "template",
    "comment" : " A vector is an object representing distance in vertical and horizontal directions in multidimensional space\n Components are the first template parameter with the second template parameter being vector dimensionality\n Most vector operations take advantage of parallelism to do simple arithmetic on each component in parallel\n TODO: slices returning vectors, swizzling, and dispatch forwarding\n",
    "line" : 19,
    "char" : 1,
    "name" : "Vector",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     },
     {
      "name" : "dimensions",
      "kind" : "value",
      "deco" : "k"
     }
    ],
    "members" : [
     {
      "name" : "Vector",
      "kind" : "class",
      "line" : 19,
      "char" : 1,
      "members" : [
       {
        "name" : "components",
        "kind" : "variable",
        "comment" : "The components of the vector\n",
        "line" : 25,
        "char" : 23,
        "type" : "T[dimensions]"
       },
       {
        "name" : "directionAngles",
        "kind" : "function",
        "comment" : " Sets the angles of the vector where the angles are given in radians\n Angles are direction angles (eg. first angle is direction from x, second is direction from y, etc...)\n 0 goes along the positive axis\n",
        "line" : 47,
        "char" : 20,
        "type" : "@property void(Vector!(double, dimensions) angles)",
        "parameters" : [
         {
          "name" : "angles",
          "type" : "Vector!(double, dimensions)"
         }
        ],
        "endline" : 52,
        "endchar" : 5
       },
       {
        "name" : "directionAngles",
        "kind" : "function",
        "comment" : " Gets the angles of the vector where the angles are given in radians\n Angles are direction angles (eg. first angle is direction from x, second is direction from y, etc...)\n 0 goes along the positive axis\n",
        "line" : 59,
        "char" : 43,
        "type" : "@property Vector!(double, dimensions)()",
        "endline" : 66,
        "endchar" : 5
       },
       {
        "name" : "magnitude",
        "kind" : "function",
        "comment" : " Sets the length of the vector\n Maintains component ratios of the vector\n",
        "line" : 72,
        "char" : 20,
        "type" : "@property void(double mag)",
        "parameters" : [
         {
          "name" : "mag",
          "deco" : "d"
         }
        ],
        "endline" : 77,
        "endchar" : 5
       },
       {
        "name" : "magnitude",
        "kind" : "function",
        "comment" : " Gets the length of the vector\n",
        "line" : 82,
        "char" : 22,
        "type" : "@property double()",
        "endline" : 85,
        "endchar" : 5
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "comment" : " A vector constructor; takes in the number of args given and assigns them as components\n",
        "line" : 90,
        "char" : 5,
        "type" : "(T[] components...)",
        "parameters" : [
         {
          "name" : "components",
          "type" : "T[]"
         }
        ],
        "endline" : 93,
        "endchar" : 5
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "comment" : " A vector constructor; takes in a value that acts as both vector components\n",
        "line" : 98,
        "char" : 5,
        "type" : "(T allComponents)",
        "parameters" : [
         {
          "name" : "allComponents",
          "type" : "T"
         }
        ],
        "endline" : 100,
        "endchar" : 5
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "comment" : " A constructor that sets all elements to 0\n",
        "line" : 105,
        "char" : 5,
        "type" : "()",
        "endline" : 107,
        "endchar" : 5
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "comment" : " A copy constructor for a vector; makes the same vector, but as a different instance\n",
        "line" : 112,
        "char" : 5,
        "type" : "(Vector!(T, dimensions) toCopy)",
        "parameters" : [
         {
          "name" : "toCopy",
          "type" : "Vector!(T, dimensions)"
         }
        ],
        "endline" : 114,
        "endchar" : 5
       },
       {
        "name" : "opAssign",
        "kind" : "function",
        "comment" : " Allows assigning the vector to a static array to set all components of the vector\n",
        "line" : 119,
        "char" : 10,
        "type" : "void(T[] rhs)",
        "parameters" : [
         {
          "name" : "rhs",
          "type" : "T[]"
         }
        ],
        "endline" : 121,
        "endchar" : 5
       },
       {
        "name" : "opAssign",
        "kind" : "function",
        "comment" : " Allows assigning the vector to a single value to set all elements of the vector to such a value\n",
        "line" : 126,
        "char" : 10,
        "type" : "void(T rhs)",
        "parameters" : [
         {
          "name" : "rhs",
          "type" : "T"
         }
        ],
        "endline" : 128,
        "endchar" : 5
       },
       {
        "kind" : "template",
        "comment" : " Allows the vector to have the joint operator assign syntax\n Works component-wise (eg. (3, 2, 1) += (1, 2, 3) makes (3, 2, 1) into (4, 4, 4))\n",
        "line" : 134,
        "char" : 10,
        "name" : "opOpAssign",
        "parameters" : [
         {
          "name" : "op",
          "kind" : "value",
          "type" : "string"
         }
        ],
        "members" : [
         {
          "name" : "opOpAssign",
          "kind" : "function",
          "line" : 134,
          "char" : 10,
          "type" : "void(Vector!(T, dimensions) otherVector)",
          "parameters" : [
           {
            "name" : "otherVector",
            "type" : "Vector!(T, dimensions)"
           }
          ],
          "endline" : 136,
          "endchar" : 5
         }
        ]
       },
       {
        "kind" : "template",
        "comment" : " Allows the vector to have the joint operator assign syntax\n Works component-wise, so each operation of the constant is applied to each component\n",
        "line" : 142,
        "char" : 10,
        "name" : "opOpAssign",
        "parameters" : [
         {
          "name" : "op",
          "kind" : "value",
          "type" : "string"
         }
        ],
        "members" : [
         {
          "name" : "opOpAssign",
          "kind" : "function",
          "line" : 142,
          "char" : 10,
          "type" : "void(T[] otherComponents)",
          "parameters" : [
           {
            "name" : "otherComponents",
            "type" : "T[]"
           }
          ],
          "endline" : 144,
          "endchar" : 5
         }
        ]
       },
       {
        "kind" : "template",
        "comment" : " Allows the vector to have the joint operator assign syntax\n Works component-wise, so each operation of the constant is applied to each component\n",
        "line" : 150,
        "char" : 10,
        "name" : "opOpAssign",
        "parameters" : [
         {
          "name" : "op",
          "kind" : "value",
          "type" : "string"
         }
        ],
        "members" : [
         {
          "name" : "opOpAssign",
          "kind" : "function",
          "line" : 150,
          "char" : 10,
          "type" : "void(T constant)",
          "parameters" : [
           {
            "name" : "constant",
            "type" : "T"
           }
          ],
          "endline" : 152,
          "endchar" : 5
         }
        ]
       },
       {
        "kind" : "template",
        "comment" : " Casts the vector to a vector of another type\n",
        "line" : 157,
        "char" : 7,
        "name" : "opCast",
        "parameters" : [
         {
          "name" : "U",
          "kind" : "type"
         }
        ],
        "constraint" : "is(U : Vector!V, V...)",
        "members" : [
         {
          "name" : "opCast",
          "kind" : "function",
          "line" : 157,
          "char" : 7,
          "type" : "U()",
          "endline" : 164,
          "endchar" : 5
         }
        ]
       },
       {
        "kind" : "template",
        "comment" : " Allows unary functions to be applied to the vector; aplies the same operator to all components\n",
        "line" : 169,
        "char" : 28,
        "name" : "opUnary",
        "parameters" : [
         {
          "name" : "op",
          "kind" : "value",
          "type" : "string"
         }
        ],
        "members" : [
         {
          "name" : "opUnary",
          "kind" : "function",
          "line" : 169,
          "char" : 28,
          "type" : "Vector!(T, dimensions)()",
          "endline" : 173,
          "endchar" : 5
         }
        ]
       },
       {
        "kind" : "template",
        "comment" : " Allows the vector to be used with normal operators\n Works component-wise (eg. (3, 2, 1) + (1, 2, 3) = (4, 4, 4))\n",
        "line" : 179,
        "char" : 28,
        "name" : "opBinary",
        "parameters" : [
         {
          "name" : "op",
          "kind" : "value",
          "type" : "string"
         }
        ],
        "members" : [
         {
          "name" : "opBinary",
          "kind" : "function",
          "line" : 179,
          "char" : 28,
          "type" : "Vector!(T, dimensions)(Vector!(T, dimensions) otherVector)",
          "parameters" : [
           {
            "name" : "otherVector",
            "type" : "Vector!(T, dimensions)"
           }
          ],
          "endline" : 183,
          "endchar" : 5
         }
        ]
       },
       {
        "kind" : "template",
        "comment" : " Allows the vector to be used with normal operators\n Works component-wise (eg. (3, 2, 1) + (1, 2, 3) = (4, 4, 4))\n",
        "line" : 189,
        "char" : 28,
        "name" : "opBinary",
        "parameters" : [
         {
          "name" : "op",
          "kind" : "value",
          "type" : "string"
         }
        ],
        "members" : [
         {
          "name" : "opBinary",
          "kind" : "function",
          "line" : 189,
          "char" : 28,
          "type" : "Vector!(T, dimensions)(T[] otherComponents)",
          "parameters" : [
           {
            "name" : "otherComponents",
            "type" : "T[]"
           }
          ],
          "endline" : 193,
          "endchar" : 5
         }
        ]
       },
       {
        "kind" : "template",
        "comment" : " Allows the vector to be used with normal operators\n Works component-wise, so each operation of the constant is applied to each component\n",
        "line" : 199,
        "char" : 28,
        "name" : "opBinary",
        "parameters" : [
         {
          "name" : "op",
          "kind" : "value",
          "type" : "string"
         }
        ],
        "members" : [
         {
          "name" : "opBinary",
          "kind" : "function",
          "line" : 199,
          "char" : 28,
          "type" : "Vector!(T, dimensions)(T constant)",
          "parameters" : [
           {
            "name" : "constant",
            "type" : "T"
           }
          ],
          "endline" : 203,
          "endchar" : 5
         }
        ]
       },
       {
        "name" : "toString",
        "kind" : "function",
        "comment" : " Gives the vector a pretty string format\n (eg. (1, 2, 3) => <1, 2, 3>)\n",
        "line" : 209,
        "char" : 21,
        "storageClass" : [
         "override"
        ],
        "type" : "string()",
        "endline" : 216,
        "endchar" : 5
       },
       {
        "name" : "opEquals",
        "kind" : "function",
        "comment" : " Returns whether the vector is equal to another vector or constant\n Uses approxEquals to do easy equality for vectors of doubles\n",
        "line" : 222,
        "char" : 19,
        "storageClass" : [
         "override"
        ],
        "type" : "bool(Object o)",
        "parameters" : [
         {
          "name" : "o",
          "type" : "Object"
         }
        ],
        "endline" : 230,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "comment" : " Calculates the dot product or the similarity of two vectors\n",
    "line" : 237,
    "char" : 3,
    "name" : "dot",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     },
     {
      "name" : "dim",
      "kind" : "value",
      "deco" : "k"
     }
    ],
    "members" : [
     {
      "name" : "dot",
      "kind" : "function",
      "line" : 237,
      "char" : 3,
      "type" : "T(Vector!(T, dim) first, Vector!(T, dim) second)",
      "parameters" : [
       {
        "name" : "first",
        "type" : "Vector!(T, dim)"
       },
       {
        "name" : "second",
        "type" : "Vector!(T, dim)"
       }
      ],
      "endline" : 240,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "comment" : " Calculates the cross product or the perpendicular vector to two vectors\n Currently only works on 2 or 3 dimensional vectors\n",
    "line" : 246,
    "char" : 15,
    "name" : "cross",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     },
     {
      "name" : "size",
      "kind" : "value",
      "deco" : "k"
     }
    ],
    "constraint" : "size == 2 || size == 3",
    "members" : [
     {
      "name" : "cross",
      "kind" : "function",
      "line" : 246,
      "char" : 15,
      "type" : "Vector!(T, 3)(Vector!(T, size) first, Vector!(T, size) second)",
      "parameters" : [
       {
        "name" : "first",
        "type" : "Vector!(T, size)"
       },
       {
        "name" : "second",
        "type" : "Vector!(T, size)"
       }
      ],
      "endline" : 253,
      "endchar" : 1
     }
    ]
   }
  ]
 },
 {
  "name" : "d2d.math",
  "kind" : "module",
  "file" : "source/d2d/math/package.d",
  "comment" : " Math\n",
  "members" : [
   {
    "name" : "d2d.math.AxisAlignedBoundingBox",
    "kind" : "import",
    "line" : 6,
    "char" : 15
   },
   {
    "name" : "d2d.math.BezierCurve",
    "kind" : "import",
    "line" : 7,
    "char" : 15
   },
   {
    "name" : "d2d.math.Matrix",
    "kind" : "import",
    "line" : 8,
    "char" : 15
   },
   {
    "name" : "d2d.math.Segment",
    "kind" : "import",
    "line" : 9,
    "char" : 15
   },
   {
    "name" : "d2d.math.Vector",
    "kind" : "import",
    "line" : 10,
    "char" : 15
   }
  ]
 },
 {
  "name" : "d2d",
  "kind" : "module",
  "file" : "source/d2d/package.d",
  "comment" : " d2d\n",
  "members" : [
   {
    "name" : "d2d.Button",
    "kind" : "import",
    "line" : 6,
    "char" : 15
   },
   {
    "name" : "d2d.Component",
    "kind" : "import",
    "line" : 7,
    "char" : 15
   },
   {
    "name" : "d2d.ComponentGroup",
    "kind" : "import",
    "line" : 8,
    "char" : 15
   },
   {
    "name" : "d2d.Display",
    "kind" : "import",
    "line" : 9,
    "char" : 15
   },
   {
    "name" : "d2d.math",
    "kind" : "import",
    "line" : 10,
    "char" : 15
   },
   {
    "name" : "d2d.Activity",
    "kind" : "import",
    "line" : 11,
    "char" : 15
   },
   {
    "name" : "d2d.sdl2",
    "kind" : "import",
    "line" : 12,
    "char" : 15
   }
  ]
 },
 {
  "name" : "d2d.sdl2.Color",
  "kind" : "module",
  "file" : "source/d2d/sdl2/Color.d",
  "comment" : " Color\n",
  "members" : [
   {
    "name" : "d2d.sdl2",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "Color",
    "kind" : "struct",
    "comment" : " A color struct\n As of right now, only works with additive RGBA, but may work with other formats later\n Additive RGBA is where the color is stored as an addition of red, green, and blue\n Alpha is the transparency of the color\n",
    "line" : 14,
    "char" : 1,
    "members" : [
     {
      "name" : "r",
      "kind" : "variable",
      "comment" : "Red value for the color\n",
      "line" : 15,
      "char" : 11,
      "deco" : "h",
      "offset" : 0
     },
     {
      "name" : "g",
      "kind" : "variable",
      "comment" : "Green value for the color\n",
      "line" : 16,
      "char" : 11,
      "deco" : "h",
      "offset" : 1
     },
     {
      "name" : "b",
      "kind" : "variable",
      "comment" : "Blue value for the color\n",
      "line" : 17,
      "char" : 11,
      "deco" : "h",
      "offset" : 2
     },
     {
      "name" : "a",
      "kind" : "variable",
      "comment" : "Alpha value or transparency for the color\n",
      "line" : 18,
      "char" : 11,
      "deco" : "h",
      "init" : "cast(ubyte)255u",
      "offset" : 3
     },
     {
      "name" : "sdlColor",
      "kind" : "variable",
      "protection" : "private",
      "line" : 19,
      "char" : 23,
      "deco" : "S8derelict4sdl28internal9sdl_types9SDL_Color",
      "offset" : 4
     },
     {
      "name" : "handle",
      "kind" : "function",
      "comment" : " Gets the color as an SDL_Color\n",
      "line" : 24,
      "char" : 26,
      "deco" : "FNdZPS8derelict4sdl28internal9sdl_types9SDL_Color",
      "endline" : 27,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "PredefinedColor",
    "kind" : "enum",
    "comment" : " A list of pre-defined common colors\n",
    "line" : 33,
    "char" : 1,
    "baseDeco" : "S3d2d4sdl25ColorQg",
    "members" : [
     {
      "name" : "RED",
      "kind" : "enum member",
      "value" : "Color(cast(ubyte)255u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)255u, SDL_Color(cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u))",
      "line" : 34,
      "char" : 5
     },
     {
      "name" : "GREEN",
      "kind" : "enum member",
      "value" : "Color(cast(ubyte)0u, cast(ubyte)255u, cast(ubyte)0u, cast(ubyte)255u, SDL_Color(cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u))",
      "line" : 35,
      "char" : 5
     },
     {
      "name" : "BLUE",
      "kind" : "enum member",
      "value" : "Color(cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)255u, cast(ubyte)255u, SDL_Color(cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u))",
      "line" : 36,
      "char" : 5
     },
     {
      "name" : "YELLOW",
      "kind" : "enum member",
      "value" : "Color(cast(ubyte)255u, cast(ubyte)255u, cast(ubyte)0u, cast(ubyte)255u, SDL_Color(cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u))",
      "line" : 37,
      "char" : 5
     },
     {
      "name" : "MAGENTA",
      "kind" : "enum member",
      "value" : "Color(cast(ubyte)255u, cast(ubyte)0u, cast(ubyte)255u, cast(ubyte)255u, SDL_Color(cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u))",
      "line" : 38,
      "char" : 5
     },
     {
      "name" : "CYAN",
      "kind" : "enum member",
      "value" : "Color(cast(ubyte)0u, cast(ubyte)255u, cast(ubyte)255u, cast(ubyte)255u, SDL_Color(cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u))",
      "line" : 39,
      "char" : 5
     },
     {
      "name" : "WHITE",
      "kind" : "enum member",
      "value" : "Color(cast(ubyte)255u, cast(ubyte)255u, cast(ubyte)255u, cast(ubyte)255u, SDL_Color(cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u))",
      "line" : 41,
      "char" : 5
     },
     {
      "name" : "PINK",
      "kind" : "enum member",
      "value" : "Color(cast(ubyte)255u, cast(ubyte)125u, cast(ubyte)255u, cast(ubyte)255u, SDL_Color(cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u))",
      "line" : 42,
      "char" : 5
     },
     {
      "name" : "ORANGE",
      "kind" : "enum member",
      "value" : "Color(cast(ubyte)255u, cast(ubyte)125u, cast(ubyte)0u, cast(ubyte)255u, SDL_Color(cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u))",
      "line" : 43,
      "char" : 5
     },
     {
      "name" : "LIGHTGREY",
      "kind" : "enum member",
      "value" : "Color(cast(ubyte)175u, cast(ubyte)175u, cast(ubyte)175u, cast(ubyte)255u, SDL_Color(cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u))",
      "line" : 44,
      "char" : 5
     },
     {
      "name" : "DARKGREY",
      "kind" : "enum member",
      "value" : "Color(cast(ubyte)75u, cast(ubyte)75u, cast(ubyte)75u, cast(ubyte)255u, SDL_Color(cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u))",
      "line" : 45,
      "char" : 5
     },
     {
      "name" : "BLACK",
      "kind" : "enum member",
      "value" : "Color(cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)255u, SDL_Color(cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u))",
      "line" : 46,
      "char" : 5
     }
    ]
   }
  ]
 },
 {
  "name" : "d2d.sdl2.EventHandler",
  "kind" : "module",
  "file" : "source/d2d/sdl2/EventHandler.d",
  "comment" : " Event Handler\n",
  "members" : [
   {
    "name" : "d2d.sdl2",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "EventHandler",
    "kind" : "interface",
    "comment" : " An interface that just defines an object that can collect and respond to sdl events\n Event handlers can be added to a display to add unique behaviour for events\n",
    "line" : 12,
    "char" : 1,
    "members" : [
     {
      "name" : "handleEvent",
      "kind" : "function",
      "comment" : "Takes in an SDL event and should define what behaviour should happen for specific events\n",
      "line" : 14,
      "char" : 10,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FS8derelict4sdl28internal9sdl_types9SDL_EventZv",
      "parameters" : [
       {
        "name" : "event",
        "deco" : "S8derelict4sdl28internal9sdl_types9SDL_Event"
       }
      ]
     }
    ]
   }
  ]
 },
 {
  "name" : "d2d.sdl2.Font",
  "kind" : "module",
  "file" : "source/d2d/sdl2/Font.d",
  "comment" : " Font\n",
  "members" : [
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 7,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 8,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.string",
    "kind" : "import",
    "line" : 9,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "d2d.sdl2",
    "kind" : "import",
    "line" : 10,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "Encoding",
    "kind" : "enum",
    "comment" : " The three types of encoding TTF can use\n LATIN1 is the set of ASCII characters; its glyphs are represented as chars\n UTF8 is the set of \"Unicode\" characters; it can handle all ASCII characters as well because ASCII is a subset of Unicode\n UNICODE encoding is determined by operating system; Windows handles UNICODE using UTF16, while UNIX systems use UTF8\n Note: UNICODE is identical to UTF8 in some cases but uses ushorts to represent glyphs instead of using chars\n",
    "line" : 19,
    "char" : 1,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "LATIN1",
      "kind" : "enum member",
      "value" : "0",
      "line" : 20,
      "char" : 5
     },
     {
      "name" : "UTF8",
      "kind" : "enum member",
      "value" : "1",
      "line" : 21,
      "char" : 5
     },
     {
      "name" : "UNICODE",
      "kind" : "enum member",
      "value" : "2",
      "line" : 22,
      "char" : 5
     }
    ]
   },
   {
    "name" : "Font",
    "kind" : "class",
    "comment" : " Fonts are contexts for displaying strings\n Fonts  describe how each character in the string looks and how they are spaced\n Each font includes a collection of supported glyphs and general information\n TODO: allow for multiline printing\n",
    "line" : 31,
    "char" : 1,
    "members" : [
     {
      "name" : "font",
      "kind" : "variable",
      "protection" : "private",
      "line" : 33,
      "char" : 23,
      "deco" : "PS8derelict4sdl23ttf8TTF_Font",
      "offset" : 16
     },
     {
      "name" : "handle",
      "kind" : "function",
      "comment" : " Returns the raw SDL data of this object\n",
      "line" : 38,
      "char" : 25,
      "deco" : "FNdZPS8derelict4sdl23ttf8TTF_Font",
      "endline" : 40,
      "endchar" : 5
     },
     {
      "name" : "style",
      "kind" : "function",
      "comment" : " Sets the style (bold, italic, etc.) of this font\n Style should be inputted as a bitmask composed of:\n TTF_STYLE_BOLD\n TTF_STYLE_ITALIC\n TTF_STYLE_UNDERLINE\n TTF_STYLE_STRIKETHROUGH\n If the style is normal, use TTF_STYLE_NORMAL\n For multiple styles, use a bitwise OR operator (TTF_STYLE_BOLD|TTF_STYLE_ITALIC means both bold and italic, etc.)\n",
      "line" : 52,
      "char" : 20,
      "deco" : "FNdiZv",
      "parameters" : [
       {
        "name" : "style",
        "deco" : "i"
       }
      ],
      "endline" : 54,
      "endchar" : 5
     },
     {
      "name" : "style",
      "kind" : "function",
      "comment" : " Gets the style (bold, italic, etc.) of this font\n Style is returned as a bitmask composed of:\n TTF_STYLE_BOLD\n TTF_STYLE_ITALIC\n TTF_STYLE_UNDERLINE\n TTF_STYLE_STRIKETHROUGH\n If the style is normal, the value returned will be TTF_STYLE_NORMAL\n Otherwise, use bitwise and operations to get individual values (style&TTF_STYLE_BOLD returns whether the font is bold, etc.)\n",
      "line" : 66,
      "char" : 19,
      "deco" : "FNdZi",
      "endline" : 68,
      "endchar" : 5
     },
     {
      "name" : "outline",
      "kind" : "function",
      "comment" : " Sets the size of the font's outline\n Use outline = 0 to disable outlining\n",
      "line" : 74,
      "char" : 20,
      "deco" : "FNdiZv",
      "parameters" : [
       {
        "name" : "outline",
        "deco" : "i"
       }
      ],
      "endline" : 76,
      "endchar" : 5
     },
     {
      "name" : "outline",
      "kind" : "function",
      "comment" : " Gets the size of the font's outline\n Outline is constant across glyphs in a font\n",
      "line" : 82,
      "char" : 19,
      "deco" : "FNdZi",
      "endline" : 84,
      "endchar" : 5
     },
     {
      "name" : "hinting",
      "kind" : "function",
      "comment" : " Sets the font's hinting type\n Type is taken as a value matching one of the following:\n TTF_HINTING_NORMAL\n TTF_HINTING_LIGHT\n TTF_HINTING_MONO\n TTF_HINTING_NONE\n Hinting type is how the font is programmed to map onto the pixels on a screen\n Note: the method flushes the internal cache of glyphs in the font, even if there is no change in hinting\n       It may be useful to first check the font's hinting type\n",
      "line" : 97,
      "char" : 20,
      "deco" : "FNdiZv",
      "parameters" : [
       {
        "name" : "hinting",
        "deco" : "i"
       }
      ],
      "endline" : 99,
      "endchar" : 5
     },
     {
      "name" : "hinting",
      "kind" : "function",
      "comment" : " Gets the font's hinting type\n Type is returned as a value matching one of the following:\n TTF_HINTING_NORMAL\n TTF_HINTING_LIGHT\n TTF_HINTING_MONO\n TTF_HINTING_NONE\n Type defaults to TTF_HINTING_NORMAL if no type has been set\n Hinting type is how the font is programmed to map onto the pixels on a screen\n",
      "line" : 111,
      "char" : 19,
      "deco" : "FNdZi",
      "endline" : 113,
      "endchar" : 5
     },
     {
      "name" : "kerning",
      "kind" : "function",
      "comment" : " Sets the font's kerning setting\n Default for newly created fonts is true\n Kerning setting determines whether the spacing between individual characters is adjusted for a more pleasing result\n",
      "line" : 120,
      "char" : 20,
      "deco" : "FNdbZv",
      "parameters" : [
       {
        "name" : "shouldKern",
        "deco" : "b"
       }
      ],
      "endline" : 122,
      "endchar" : 5
     },
     {
      "name" : "kerning",
      "kind" : "function",
      "comment" : " Gets the font's kerning setting\n Default for a newly created fonts is true\n Kerning setting determines whether the spacing between individual characters is adjusted for a more pleasing result\n",
      "line" : 129,
      "char" : 20,
      "deco" : "FNdZb",
      "endline" : 131,
      "endchar" : 5
     },
     {
      "name" : "height",
      "kind" : "function",
      "comment" : "\n Gets the maximum pixel height of all glyphs in this font\n Useful for multiline printing\n",
      "line" : 137,
      "char" : 19,
      "deco" : "FNdZi",
      "endline" : 139,
      "endchar" : 5
     },
     {
      "name" : "ascent",
      "kind" : "function",
      "comment" : " Gets the maximum pixel ascent of all glyphs in this font\n Ascent is the distance from the top of the glyph to the baseline\n",
      "line" : 145,
      "char" : 19,
      "deco" : "FNdZi",
      "endline" : 147,
      "endchar" : 5
     },
     {
      "name" : "descent",
      "kind" : "function",
      "comment" : " Gets the maximum pixel descent of all glyphs in this font\n Descent is the distance from the bottom of the glyph to the baseline\n",
      "line" : 153,
      "char" : 19,
      "deco" : "FNdZi",
      "endline" : 155,
      "endchar" : 5
     },
     {
      "name" : "lineSkip",
      "kind" : "function",
      "comment" : " Gets the recommended pixel height of a line of text in this font\n This represents the distance from the baseline to the top of the line\n Line skip should be larger than height in most cases\n",
      "line" : 162,
      "char" : 19,
      "deco" : "FNdZi",
      "endline" : 164,
      "endchar" : 5
     },
     {
      "name" : "faces",
      "kind" : "function",
      "comment" : " Gets the number of faces in this font\n Faces are sub-fonts that vary slightly from the main font\n",
      "line" : 170,
      "char" : 20,
      "deco" : "FNdZl",
      "endline" : 172,
      "endchar" : 5
     },
     {
      "name" : "isFixedWidth",
      "kind" : "function",
      "comment" : " Checks if the current font face of this font is fixed-width\n Fixed-width fonts are monospace - each character is the same length\n The pixel length of a string of fixed-width characters is the width of the characters times the amount of characters\n",
      "line" : 179,
      "char" : 20,
      "deco" : "FNdZb",
      "endline" : 181,
      "endchar" : 5
     },
     {
      "name" : "familyName",
      "kind" : "function",
      "comment" : " Gets the font face family name (Times, Courier, etc.)\n Returns null if not available\n",
      "line" : 187,
      "char" : 22,
      "deco" : "FNdZAya",
      "endline" : 189,
      "endchar" : 5
     },
     {
      "name" : "styleName",
      "kind" : "function",
      "comment" : " Gets the font face style name (Sans, Serif, etc.)\n Returns null if not available\n",
      "line" : 195,
      "char" : 22,
      "deco" : "FNdZAya",
      "endline" : 197,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : " Constructs a font from a font file\n",
      "line" : 202,
      "char" : 5,
      "deco" : "FAyaiiZC3d2d4sdl24FontQf",
      "originalType" : "(string file, int psize, int index = 0)",
      "parameters" : [
       {
        "name" : "file",
        "deco" : "Aya"
       },
       {
        "name" : "psize",
        "deco" : "i"
       },
       {
        "name" : "index",
        "deco" : "i",
        "default" : "0"
       }
      ],
      "endline" : 205,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : " Constructs a font from an already existing TTF_Font\n",
      "line" : 210,
      "char" : 5,
      "deco" : "FPS8derelict4sdl23ttf8TTF_FontZC3d2dQy4FontQf",
      "originalType" : "(TTF_Font* alreadyExisting)",
      "parameters" : [
       {
        "name" : "alreadyExisting",
        "deco" : "PS8derelict4sdl23ttf8TTF_Font"
       }
      ],
      "endline" : 212,
      "endchar" : 5
     },
     {
      "name" : "~this",
      "kind" : "destructor",
      "comment" : " Ensures that SDL_TTF can dispose of this font\n",
      "line" : 217,
      "char" : 5,
      "deco" : "FZv",
      "endline" : 219,
      "endchar" : 5
     },
     {
      "name" : "isProvided",
      "kind" : "function",
      "comment" : " Checks if the font supports the given glyph\n",
      "line" : 224,
      "char" : 10,
      "deco" : "FaZb",
      "parameters" : [
       {
        "name" : "glyph",
        "deco" : "a"
       }
      ],
      "endline" : 226,
      "endchar" : 5
     },
     {
      "name" : "minimumOffset",
      "kind" : "function",
      "comment" : " Gets the minimum offset of the glyph\n Returns the bottom left corner of the rectangle in which the glyph is inscribed in Cartesian coordinates\n",
      "line" : 232,
      "char" : 13,
      "deco" : "FaZC3d2d4math6Vector__TQkTiVki2ZQt",
      "originalType" : "iVector(char glyph)",
      "parameters" : [
       {
        "name" : "glyph",
        "deco" : "a"
       }
      ],
      "endline" : 236,
      "endchar" : 5
     },
     {
      "name" : "maximumOffset",
      "kind" : "function",
      "comment" : " Gets the maximum offset of the glyph\n Returns the top right corner of the rectangle in which the glyph is inscribed in Cartesian coordinates\n",
      "line" : 242,
      "char" : 13,
      "deco" : "FaZC3d2d4math6Vector__TQkTiVki2ZQt",
      "originalType" : "iVector(char glyph)",
      "parameters" : [
       {
        "name" : "glyph",
        "deco" : "a"
       }
      ],
      "endline" : 246,
      "endchar" : 5
     },
     {
      "name" : "offset",
      "kind" : "function",
      "comment" : " Gets a rectangle describing the offset of the given glyph\n Width of the rectangle is width of the glyph\n",
      "line" : 252,
      "char" : 16,
      "deco" : "FaZC3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBl",
      "originalType" : "iRectangle(char glyph)",
      "parameters" : [
       {
        "name" : "glyph",
        "deco" : "a"
       }
      ],
      "endline" : 257,
      "endchar" : 5
     },
     {
      "name" : "advanceOffset",
      "kind" : "function",
      "comment" : " Gets the advance offset of the glyph\n The advance offset is the distance the pen must be shifted after drawing a glyph\n Controls spacing between glyphs on an individual basis\n",
      "line" : 264,
      "char" : 9,
      "deco" : "FaZi",
      "parameters" : [
       {
        "name" : "glyph",
        "deco" : "a"
       }
      ],
      "endline" : 268,
      "endchar" : 5
     },
     {
      "name" : "renderTextSolid",
      "kind" : "function",
      "comment" : " Renders the text on an 8-bit palettized surface with the given color\n Background is transparent\n Text is less smooth than other render options\n This is the fastest rendering speed, and color can be changed without having to render again\n",
      "line" : 276,
      "char" : 13,
      "deco" : "FAyaS3d2d4sdl25ColorQgEQsQq4Font8EncodingZCQBmQBl7SurfaceQi",
      "originalType" : "Surface(string text, Color color = Color(0, 0, 0), Encoding T = Encoding.UTF8)",
      "parameters" : [
       {
        "name" : "text",
        "deco" : "Aya"
       },
       {
        "name" : "color",
        "deco" : "S3d2d4sdl25ColorQg",
        "default" : "Color(cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)255u, SDL_Color(cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u))"
       },
       {
        "name" : "T",
        "deco" : "E3d2d4sdl24Font8Encoding",
        "default" : "cast(Encoding)1"
       }
      ],
      "endline" : 290,
      "endchar" : 5
     },
     {
      "name" : "renderTextShaded",
      "kind" : "function",
      "comment" : " Renders the text with a given color on an 8-bit palettized surface with a given background color\n Text is smooth but renders slowly\n Surface blits as fast as the Solid render method once it is made\n",
      "line" : 297,
      "char" : 13,
      "deco" : "FAyaS3d2d4sdl25ColorQgQsEQuQs4Font8EncodingZCQBoQBn7SurfaceQi",
      "originalType" : "Surface(string text, Color foreground, Color background, Encoding T = Encoding.UTF8)",
      "parameters" : [
       {
        "name" : "text",
        "deco" : "Aya"
       },
       {
        "name" : "foreground",
        "deco" : "S3d2d4sdl25ColorQg"
       },
       {
        "name" : "background",
        "deco" : "S3d2d4sdl25ColorQg"
       },
       {
        "name" : "T",
        "deco" : "E3d2d4sdl24Font8Encoding",
        "default" : "cast(Encoding)1"
       }
      ],
      "endline" : 313,
      "endchar" : 5
     },
     {
      "name" : "renderTextBlended",
      "kind" : "function",
      "comment" : " Renders the text in high quality on a 32-bit ARGB surface, using alpha blending to dither the font with the given color\n The surface has alpha transparency\n Renders about as slowly as the Shaded render method, but blits more slowly than Solid and Shaded\n",
      "line" : 320,
      "char" : 13,
      "deco" : "FAyaS3d2d4sdl25ColorQgEQsQq4Font8EncodingZCQBmQBl7SurfaceQi",
      "originalType" : "Surface(string text, Color color = Color(0, 0, 0), Encoding T = Encoding.UTF8)",
      "parameters" : [
       {
        "name" : "text",
        "deco" : "Aya"
       },
       {
        "name" : "color",
        "deco" : "S3d2d4sdl25ColorQg",
        "default" : "Color(cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)255u, SDL_Color(cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u))"
       },
       {
        "name" : "T",
        "deco" : "E3d2d4sdl24Font8Encoding",
        "default" : "cast(Encoding)1"
       }
      ],
      "endline" : 334,
      "endchar" : 5
     },
     {
      "name" : "renderGlyphSolid",
      "kind" : "function",
      "comment" : " Renders a glyph quickly\n See renderTextSolid\n",
      "line" : 340,
      "char" : 13,
      "deco" : "FaS3d2d4sdl25ColorQgZCQtQr7SurfaceQi",
      "originalType" : "Surface(char glyph, Color color = Color(0, 0, 0))",
      "parameters" : [
       {
        "name" : "glyph",
        "deco" : "a"
       },
       {
        "name" : "color",
        "deco" : "S3d2d4sdl25ColorQg",
        "default" : "Color(cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)255u, SDL_Color(cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u))"
       }
      ],
      "endline" : 342,
      "endchar" : 5
     },
     {
      "name" : "renderGlyphShaded",
      "kind" : "function",
      "comment" : " Renders a glyph slowly but smoothly\n See renderTextShaded\n",
      "line" : 348,
      "char" : 13,
      "deco" : "FaS3d2d4sdl25ColorQgQsZCQvQt7SurfaceQi",
      "parameters" : [
       {
        "name" : "glyph",
        "deco" : "a"
       },
       {
        "name" : "foreground",
        "deco" : "S3d2d4sdl25ColorQg"
       },
       {
        "name" : "background",
        "deco" : "S3d2d4sdl25ColorQg"
       }
      ],
      "endline" : 351,
      "endchar" : 5
     },
     {
      "name" : "renderGlyphBlended",
      "kind" : "function",
      "comment" : " Renders a glyph very slowly but with very high quality\n See renderTextBlended\n",
      "line" : 357,
      "char" : 13,
      "deco" : "FaS3d2d4sdl25ColorQgZCQtQr7SurfaceQi",
      "originalType" : "Surface(char glyph, Color color = Color(0, 0, 0))",
      "parameters" : [
       {
        "name" : "glyph",
        "deco" : "a"
       },
       {
        "name" : "color",
        "deco" : "S3d2d4sdl25ColorQg",
        "default" : "Color(cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)255u, SDL_Color(cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u))"
       }
      ],
      "endline" : 359,
      "endchar" : 5
     },
     {
      "name" : "__xdtor",
      "kind" : "alias"
     }
    ]
   }
  ]
 },
 {
  "name" : "d2d.sdl2.InputSource",
  "kind" : "module",
  "file" : "source/d2d/sdl2/InputSource.d",
  "comment" : " Input Source\n",
  "members" : [
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 7,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.datetime",
    "kind" : "import",
    "line" : 8,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "d2d.sdl2",
    "kind" : "import",
    "line" : 9,
    "char" : 8,
    "protection" : "private"
   },
   {
    "kind" : "template",
    "comment" : " A pressable input source that stores it's own state\n State gets updated by an InputSource class that contains the pressable\n",
    "line" : 15,
    "char" : 1,
    "name" : "Pressable",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "Pressable",
      "kind" : "class",
      "line" : 15,
      "char" : 1,
      "members" : [
       {
        "name" : "id",
        "kind" : "variable",
        "comment" : "The identifier for the pressable\n",
        "line" : 17,
        "char" : 17,
        "storageClass" : [
         "immutable"
        ],
        "type" : "T"
       },
       {
        "name" : "lastPressed",
        "kind" : "variable",
        "comment" : "The time at which this pressable was pressed\n",
        "line" : 18,
        "char" : 13,
        "type" : "SysTime"
       },
       {
        "name" : "lastReleased",
        "kind" : "variable",
        "comment" : "The time at which this pressable was released\n",
        "line" : 19,
        "char" : 13,
        "type" : "SysTime"
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "comment" : " Constructor for a pressable takes its id\n",
        "line" : 24,
        "char" : 5,
        "type" : "(T id)",
        "parameters" : [
         {
          "name" : "id",
          "type" : "T"
         }
        ],
        "endline" : 26,
        "endchar" : 5
       },
       {
        "name" : "isPressed",
        "kind" : "function",
        "comment" : " Returns whether or not this pressable is currently being held\n",
        "line" : 31,
        "char" : 20,
        "type" : "@property bool()",
        "endline" : 33,
        "endchar" : 5
       },
       {
        "name" : "testAndRelease",
        "kind" : "function",
        "comment" : " Checks if this pressable is pressed\n If it is, it will mark it as released\n Returns whether this was actually pressed or not\n",
        "line" : 40,
        "char" : 10,
        "type" : "bool()",
        "endline" : 46,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "comment" : " A source of input from the user\n Handles acculmulating events and storing all the states of all the pressables\n The template parameter is the type for the identifier of all pressables\n",
    "line" : 55,
    "char" : 10,
    "name" : "InputSource",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "InputSource",
      "kind" : "class",
      "line" : 55,
      "char" : 10,
      "members" : [
       {
        "name" : "allPressables",
        "kind" : "function",
        "comment" : "Return a list of all of the pressables that can be accessed by the template type\n",
        "line" : 57,
        "char" : 30,
        "type" : "@property Pressable!T[T]()"
       },
       {
        "name" : "getPressedPressables",
        "kind" : "function",
        "comment" : " Returns a list of all of the pressables that are held down.\n",
        "line" : 62,
        "char" : 19,
        "type" : "Pressable!T[]()",
        "endline" : 64,
        "endchar" : 5
       }
      ]
     }
    ]
   }
  ]
 },
 {
  "name" : "d2d.sdl2.Keyboard",
  "kind" : "module",
  "file" : "source/d2d/sdl2/Keyboard.d",
  "comment" : " Keyboard\n",
  "members" : [
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 7,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.datetime",
    "kind" : "import",
    "line" : 8,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "d2d.sdl2",
    "kind" : "import",
    "line" : 9,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "allKeyCodes",
    "kind" : "variable",
    "comment" : "A list of all of the key codes\n",
    "line" : 12,
    "char" : 11,
    "storageClass" : [
     "immutable"
    ],
    "deco" : "yAE8derelict4sdl28internal9sdl_types11SDL_Keycode",
    "originalType" : "SDL_Keycode[]",
    "init" : "[cast(SDL_Keycode)0, cast(SDL_Keycode)8, cast(SDL_Keycode)9, cast(SDL_Keycode)13, cast(SDL_Keycode)27, cast(SDL_Keycode)32, cast(SDL_Keycode)33, cast(SDL_Keycode)34, cast(SDL_Keycode)35, cast(SDL_Keycode)36, cast(SDL_Keycode)37, cast(SDL_Keycode)38, cast(SDL_Keycode)39, cast(SDL_Keycode)40, cast(SDL_Keycode)41, cast(SDL_Keycode)42, cast(SDL_Keycode)43, cast(SDL_Keycode)44, cast(SDL_Keycode)45, cast(SDL_Keycode)46, cast(SDL_Keycode)47, cast(SDL_Keycode)48, cast(SDL_Keycode)49, cast(SDL_Keycode)50, cast(SDL_Keycode)51, cast(SDL_Keycode)52, cast(SDL_Keycode)53, cast(SDL_Keycode)54, cast(SDL_Keycode)55, cast(SDL_Keycode)56, cast(SDL_Keycode)57, cast(SDL_Keycode)58, cast(SDL_Keycode)59, cast(SDL_Keycode)60, cast(SDL_Keycode)61, cast(SDL_Keycode)62, cast(SDL_Keycode)63, cast(SDL_Keycode)64, cast(SDL_Keycode)91, cast(SDL_Keycode)92, cast(SDL_Keycode)93, cast(SDL_Keycode)94, cast(SDL_Keycode)95, cast(SDL_Keycode)96, cast(SDL_Keycode)97, cast(SDL_Keycode)98, cast(SDL_Keycode)99, cast(SDL_Keycode)100, cast(SDL_Keycode)101, cast(SDL_Keycode)102, cast(SDL_Keycode)103, cast(SDL_Keycode)104, cast(SDL_Keycode)105, cast(SDL_Keycode)106, cast(SDL_Keycode)107, cast(SDL_Keycode)108, cast(SDL_Keycode)109, cast(SDL_Keycode)110, cast(SDL_Keycode)111, cast(SDL_Keycode)112, cast(SDL_Keycode)113, cast(SDL_Keycode)114, cast(SDL_Keycode)115, cast(SDL_Keycode)116, cast(SDL_Keycode)117, cast(SDL_Keycode)118, cast(SDL_Keycode)119, cast(SDL_Keycode)120, cast(SDL_Keycode)121, cast(SDL_Keycode)122, cast(SDL_Keycode)127, cast(SDL_Keycode)1073741881, cast(SDL_Keycode)1073741882, cast(SDL_Keycode)1073741883, cast(SDL_Keycode)1073741884, cast(SDL_Keycode)1073741885, cast(SDL_Keycode)1073741886, cast(SDL_Keycode)1073741887, cast(SDL_Keycode)1073741888, cast(SDL_Keycode)1073741889, cast(SDL_Keycode)1073741890, cast(SDL_Keycode)1073741891, cast(SDL_Keycode)1073741892, cast(SDL_Keycode)1073741893, cast(SDL_Keycode)1073741894, cast(SDL_Keycode)1073741895, cast(SDL_Keycode)1073741896, cast(SDL_Keycode)1073741897, cast(SDL_Keycode)1073741898, cast(SDL_Keycode)1073741899, cast(SDL_Keycode)1073741901, cast(SDL_Keycode)1073741902, cast(SDL_Keycode)1073741903, cast(SDL_Keycode)1073741904, cast(SDL_Keycode)1073741905, cast(SDL_Keycode)1073741906, cast(SDL_Keycode)1073741907, cast(SDL_Keycode)1073741908, cast(SDL_Keycode)1073741909, cast(SDL_Keycode)1073741910, cast(SDL_Keycode)1073741911, cast(SDL_Keycode)1073741912, cast(SDL_Keycode)1073741913, cast(SDL_Keycode)1073741914, cast(SDL_Keycode)1073741915, cast(SDL_Keycode)1073741916, cast(SDL_Keycode)1073741917, cast(SDL_Keycode)1073741918, cast(SDL_Keycode)1073741919, cast(SDL_Keycode)1073741920, cast(SDL_Keycode)1073741921, cast(SDL_Keycode)1073741922, cast(SDL_Keycode)1073741923, cast(SDL_Keycode)1073741925, cast(SDL_Keycode)1073741926, cast(SDL_Keycode)1073741927, cast(SDL_Keycode)1073741928, cast(SDL_Keycode)1073741929, cast(SDL_Keycode)1073741930, cast(SDL_Keycode)1073741931, cast(SDL_Keycode)1073741932, cast(SDL_Keycode)1073741933, cast(SDL_Keycode)1073741934, cast(SDL_Keycode)1073741935, cast(SDL_Keycode)1073741936, cast(SDL_Keycode)1073741937, cast(SDL_Keycode)1073741938, cast(SDL_Keycode)1073741939, cast(SDL_Keycode)1073741940, cast(SDL_Keycode)1073741941, cast(SDL_Keycode)1073741942, cast(SDL_Keycode)1073741943, cast(SDL_Keycode)1073741944, cast(SDL_Keycode)1073741945, cast(SDL_Keycode)1073741946, cast(SDL_Keycode)1073741947, cast(SDL_Keycode)1073741948, cast(SDL_Keycode)1073741949, cast(SDL_Keycode)1073741950, cast(SDL_Keycode)1073741951, cast(SDL_Keycode)1073741952, cast(SDL_Keycode)1073741953, cast(SDL_Keycode)1073741957, cast(SDL_Keycode)1073741958, cast(SDL_Keycode)1073741977, cast(SDL_Keycode)1073741978, cast(SDL_Keycode)1073741979, cast(SDL_Keycode)1073741980, cast(SDL_Keycode)1073741981, cast(SDL_Keycode)1073741982, cast(SDL_Keycode)1073741983, cast(SDL_Keycode)1073741984, cast(SDL_Keycode)1073741985, cast(SDL_Keycode)1073741986, cast(SDL_Keycode)1073741987, cast(SDL_Keycode)1073741988, cast(SDL_Keycode)1073742000, cast(SDL_Keycode)1073742001, cast(SDL_Keycode)1073742002, cast(SDL_Keycode)1073742003, cast(SDL_Keycode)1073742004, cast(SDL_Keycode)1073742005, cast(SDL_Keycode)1073742006, cast(SDL_Keycode)1073742007, cast(SDL_Keycode)1073742008, cast(SDL_Keycode)1073742009, cast(SDL_Keycode)1073742010, cast(SDL_Keycode)1073742011, cast(SDL_Keycode)1073742012, cast(SDL_Keycode)1073742013, cast(SDL_Keycode)1073742014, cast(SDL_Keycode)1073742015, cast(SDL_Keycode)1073742016, cast(SDL_Keycode)1073742017, cast(SDL_Keycode)1073742018, cast(SDL_Keycode)1073742019, cast(SDL_Keycode)1073742020, cast(SDL_Keycode)1073742021, cast(SDL_Keycode)1073742022, cast(SDL_Keycode)1073742023, cast(SDL_Keycode)1073742024, cast(SDL_Keycode)1073742025, cast(SDL_Keycode)1073742026, cast(SDL_Keycode)1073742027, cast(SDL_Keycode)1073742028, cast(SDL_Keycode)1073742029, cast(SDL_Keycode)1073742030, cast(SDL_Keycode)1073742031, cast(SDL_Keycode)1073742032, cast(SDL_Keycode)1073742033, cast(SDL_Keycode)1073742034, cast(SDL_Keycode)1073742035, cast(SDL_Keycode)1073742036, cast(SDL_Keycode)1073742037, cast(SDL_Keycode)1073742038, cast(SDL_Keycode)1073742039, cast(SDL_Keycode)1073742040, cast(SDL_Keycode)1073742041, cast(SDL_Keycode)1073742042, cast(SDL_Keycode)1073742043, cast(SDL_Keycode)1073742044, cast(SDL_Keycode)1073742045, cast(SDL_Keycode)1073742048, cast(SDL_Keycode)1073742049, cast(SDL_Keycode)1073742050, cast(SDL_Keycode)1073742051, cast(SDL_Keycode)1073742052, cast(SDL_Keycode)1073742053, cast(SDL_Keycode)1073742054, cast(SDL_Keycode)1073742055, cast(SDL_Keycode)1073742081, cast(SDL_Keycode)1073742082, cast(SDL_Keycode)1073742083, cast(SDL_Keycode)1073742084, cast(SDL_Keycode)1073742085, cast(SDL_Keycode)1073742086, cast(SDL_Keycode)1073742087, cast(SDL_Keycode)1073742088, cast(SDL_Keycode)1073742089, cast(SDL_Keycode)1073742090, cast(SDL_Keycode)1073742091, cast(SDL_Keycode)1073742092, cast(SDL_Keycode)1073742093, cast(SDL_Keycode)1073742094, cast(SDL_Keycode)1073742095, cast(SDL_Keycode)1073742096, cast(SDL_Keycode)1073742097, cast(SDL_Keycode)1073742098, cast(SDL_Keycode)1073742099, cast(SDL_Keycode)1073742100, cast(SDL_Keycode)1073742101, cast(SDL_Keycode)1073742102, cast(SDL_Keycode)1073742103, cast(SDL_Keycode)1073742104, cast(SDL_Keycode)1073742105, cast(SDL_Keycode)1073742106]"
   },
   {
    "name" : "Keyboard",
    "kind" : "class",
    "comment" : " The keyboard input source which accumulates keyboard information\n",
    "line" : 61,
    "char" : 1,
    "base" : "d2d.sdl2.InputSource.InputSource!(SDL_Keycode).InputSource",
    "interfaces" : [
     "d2d.sdl2.EventHandler.EventHandler"
    ],
    "members" : [
     {
      "name" : "_allKeys",
      "kind" : "variable",
      "protection" : "private",
      "comment" : "All of the pressable structs visible\n",
      "line" : 63,
      "char" : 48,
      "deco" : "HE8derelict4sdl28internal9sdl_types11SDL_KeycodeC3d2dQBq11InputSource__T9PressableTQDeZQp",
      "originalType" : "Pressable!SDL_Keycode[SDL_Keycode]",
      "offset" : 32
     },
     {
      "name" : "allKeys",
      "kind" : "alias",
      "comment" : "Allows allPressables to be called as allKeys\n",
      "line" : 65,
      "char" : 5
     },
     {
      "name" : "allPressables",
      "kind" : "function",
      "comment" : " Returns all of the keys on the keyboard\n",
      "line" : 70,
      "char" : 59,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdZHE8derelict4sdl28internal9sdl_types11SDL_KeycodeC3d2dQBq11InputSource__T9PressableTQDeZQp",
      "originalType" : "@property Pressable!SDL_Keycode[SDL_Keycode]()",
      "endline" : 72,
      "endchar" : 5,
      "overrides" : [
       "d2d.sdl2.InputSource.InputSource!(SDL_Keycode).InputSource.allPressables"
      ]
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : " Initializes all keys of a keyboard\n",
      "line" : 77,
      "char" : 5,
      "deco" : "FZC3d2d4sdl28KeyboardQj",
      "originalType" : "()",
      "endline" : 79,
      "endchar" : 5
     },
     {
      "name" : "handleEvent",
      "kind" : "function",
      "comment" : " Accumulates all of the keyboard events and updates stored pressables accordingly\n",
      "line" : 84,
      "char" : 19,
      "storageClass" : [
       "override"
      ],
      "deco" : "FS8derelict4sdl28internal9sdl_types9SDL_EventZv",
      "parameters" : [
       {
        "name" : "event",
        "deco" : "S8derelict4sdl28internal9sdl_types9SDL_Event"
       }
      ],
      "endline" : 91,
      "endchar" : 5,
      "overrides" : [
       "d2d.sdl2.EventHandler.EventHandler.handleEvent"
      ]
     }
    ]
   }
  ]
 },
 {
  "name" : "d2d.sdl2.Mouse",
  "kind" : "module",
  "file" : "source/d2d/sdl2/Mouse.d",
  "comment" : " Mouse\n",
  "members" : [
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.datetime",
    "kind" : "import",
    "line" : 7,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "d2d.sdl2",
    "kind" : "import",
    "line" : 8,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "allButtonCodes",
    "kind" : "variable",
    "comment" : "A list of all of the button codes\n",
    "line" : 11,
    "char" : 11,
    "storageClass" : [
     "immutable"
    ],
    "deco" : "yAE8derelict4sdl28internal9sdl_types17SDL_D_MouseButton",
    "originalType" : "SDL_D_MouseButton[]",
    "init" : "[cast(SDL_D_MouseButton)cast(ubyte)1u, cast(SDL_D_MouseButton)cast(ubyte)2u, cast(SDL_D_MouseButton)cast(ubyte)3u, cast(SDL_D_MouseButton)cast(ubyte)4u, cast(SDL_D_MouseButton)cast(ubyte)5u]"
   },
   {
    "name" : "Mouse",
    "kind" : "class",
    "comment" : " The mouse input source which acculmulates mouse information\n",
    "line" : 18,
    "char" : 1,
    "base" : "d2d.sdl2.InputSource.InputSource!uint.InputSource",
    "interfaces" : [
     "d2d.sdl2.EventHandler.EventHandler"
    ],
    "members" : [
     {
      "name" : "_allButtons",
      "kind" : "variable",
      "protection" : "private",
      "comment" : "All of the buttons on the mouse\n",
      "line" : 20,
      "char" : 34,
      "deco" : "HkC3d2d4sdl211InputSource__T9PressableTkZQn",
      "offset" : 32
     },
     {
      "name" : "_totalWheelDisplacement",
      "kind" : "variable",
      "protection" : "private",
      "comment" : "Total displacement of the mousewheel since mouse construction\n",
      "line" : 21,
      "char" : 21,
      "deco" : "C3d2d4math6Vector__TQkTiVki2ZQt",
      "originalType" : "iVector",
      "offset" : 40
     },
     {
      "name" : "_location",
      "kind" : "variable",
      "protection" : "private",
      "comment" : "The location of the mouse accounting for logical size or viewport\n",
      "line" : 22,
      "char" : 21,
      "deco" : "C3d2d4math6Vector__TQkTiVki2ZQt",
      "originalType" : "iVector",
      "offset" : 48
     },
     {
      "name" : "allButtons",
      "kind" : "alias",
      "comment" : "Allows allPressables to be called as allButtons\n",
      "line" : 24,
      "char" : 5
     },
     {
      "name" : "allPressables",
      "kind" : "function",
      "comment" : " Returns all of the mouse buttons\n",
      "line" : 29,
      "char" : 45,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdZHkC3d2d4sdl211InputSource__T9PressableTkZQn",
      "endline" : 31,
      "endchar" : 5,
      "overrides" : [
       "d2d.sdl2.InputSource.InputSource!uint.InputSource.allPressables"
      ]
     },
     {
      "name" : "location",
      "kind" : "function",
      "comment" : " Gets the mouse location accounting for logical size or viewport\n This should be what is most regularly used\n",
      "line" : 37,
      "char" : 23,
      "deco" : "FNdZC3d2d4math6Vector__TQkTiVki2ZQt",
      "originalType" : "@property iVector()",
      "endline" : 39,
      "endchar" : 5
     },
     {
      "name" : "windowLocation",
      "kind" : "function",
      "comment" : " Sets the location of the mouse relative to the window\n",
      "line" : 44,
      "char" : 20,
      "deco" : "FNdC3d2d4math6Vector__TQkTiVki2ZQtZv",
      "originalType" : "@property void(iVector location)",
      "parameters" : [
       {
        "name" : "location",
        "deco" : "C3d2d4math6Vector__TQkTiVki2ZQt"
       }
      ],
      "endline" : 46,
      "endchar" : 5
     },
     {
      "name" : "windowLocation",
      "kind" : "function",
      "comment" : " Gets the location of the mouse\n",
      "line" : 51,
      "char" : 23,
      "deco" : "FNdZC3d2d4math6Vector__TQkTiVki2ZQt",
      "originalType" : "@property iVector()",
      "endline" : 55,
      "endchar" : 5
     },
     {
      "name" : "screenLocation",
      "kind" : "function",
      "comment" : " Sets the location of the mouse globally\n",
      "line" : 60,
      "char" : 20,
      "deco" : "FNdC3d2d4math6Vector__TQkTiVki2ZQtZv",
      "originalType" : "@property void(iVector location)",
      "parameters" : [
       {
        "name" : "location",
        "deco" : "C3d2d4math6Vector__TQkTiVki2ZQt"
       }
      ],
      "endline" : 62,
      "endchar" : 5
     },
     {
      "name" : "screenLocation",
      "kind" : "function",
      "comment" : " Gets the location of the mouse globally\n",
      "line" : 67,
      "char" : 23,
      "deco" : "FNdZC3d2d4math6Vector__TQkTiVki2ZQt",
      "originalType" : "@property iVector()",
      "endline" : 71,
      "endchar" : 5
     },
     {
      "name" : "totalWheelDisplacement",
      "kind" : "function",
      "comment" : " Gets by how much the mouse wheel has been displaced\n Records changes in wheel from the start of mouse construction\n",
      "line" : 77,
      "char" : 23,
      "deco" : "FNdZC3d2d4math6Vector__TQkTiVki2ZQt",
      "originalType" : "@property iVector()",
      "endline" : 79,
      "endchar" : 5
     },
     {
      "name" : "cursor",
      "kind" : "function",
      "comment" : " Sets the cursor of the mouse\n",
      "line" : 84,
      "char" : 20,
      "deco" : "FNdC3d2d4sdl25Mouse6CursorZv",
      "parameters" : [
       {
        "name" : "newCursor",
        "deco" : "C3d2d4sdl25Mouse6Cursor"
       }
      ],
      "endline" : 86,
      "endchar" : 5
     },
     {
      "name" : "cursor",
      "kind" : "function",
      "comment" : " Gets the cursor of the mouse\n Special precautions must be taken when using this method:\n Make sure to store the output of the cursor or make sure the cursor doesn't get GCed\n Because the actual cursor is being used in C, D will think this returned cursor won't be being used and destroy it\n It is probably better to avoid this method entirely\n",
      "line" : 95,
      "char" : 22,
      "deco" : "FNdZC3d2d4sdl25Mouse6Cursor",
      "endline" : 97,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : " Makes a mouse and initializes all of the buttons\n",
      "line" : 102,
      "char" : 5,
      "deco" : "FZC3d2d4sdl25MouseQg",
      "originalType" : "()",
      "endline" : 107,
      "endchar" : 5
     },
     {
      "name" : "handleEvent",
      "kind" : "function",
      "comment" : " Acculmulates all of the mouse events and updates stored pressables accordingly\n",
      "line" : 112,
      "char" : 19,
      "storageClass" : [
       "override"
      ],
      "deco" : "FS8derelict4sdl28internal9sdl_types9SDL_EventZv",
      "parameters" : [
       {
        "name" : "event",
        "deco" : "S8derelict4sdl28internal9sdl_types9SDL_Event"
       }
      ],
      "endline" : 131,
      "endchar" : 5,
      "overrides" : [
       "d2d.sdl2.EventHandler.EventHandler.handleEvent"
      ]
     }
    ]
   },
   {
    "name" : "Cursor",
    "kind" : "class",
    "comment" : " A cursor is how the mouse at its location looks\n While this class should *technically* be defined in d2d.sdl2, its only use is in Mouse\n And since this class is small, instead of giving it its own file, I'll keep it here\n",
    "line" : 140,
    "char" : 1,
    "members" : [
     {
      "name" : "cursor",
      "kind" : "variable",
      "protection" : "private",
      "line" : 142,
      "char" : 25,
      "deco" : "PS8derelict4sdl28internal9sdl_types10SDL_Cursor",
      "offset" : 16
     },
     {
      "name" : "handle",
      "kind" : "function",
      "comment" : " Returns the raw SDL data of this object\n",
      "line" : 147,
      "char" : 15,
      "deco" : "FNdZPS8derelict4sdl28internal9sdl_types10SDL_Cursor",
      "originalType" : "@property ()",
      "endline" : 149,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : " Creates a cursor from a surface and the hotspot\n The hotspot is where on the surface is the actual mouse location\n",
      "line" : 155,
      "char" : 5,
      "deco" : "FC3d2d4sdl27SurfaceQiiiZCQxQv5Mouse6Cursor",
      "originalType" : "(Surface appearance, int hotspotX, int hotspotY)",
      "parameters" : [
       {
        "name" : "appearance",
        "deco" : "C3d2d4sdl27SurfaceQi"
       },
       {
        "name" : "hotspotX",
        "deco" : "i"
       },
       {
        "name" : "hotspotY",
        "deco" : "i"
       }
      ],
      "endline" : 157,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : " Creates a cursor from a predefined system cursor\n",
      "line" : 162,
      "char" : 5,
      "deco" : "FE8derelict4sdl28internal9sdl_types16SDL_SystemCursorZC3d2dQBw5Mouse6Cursor",
      "originalType" : "(SDL_SystemCursor id)",
      "parameters" : [
       {
        "name" : "id",
        "deco" : "E8derelict4sdl28internal9sdl_types16SDL_SystemCursor"
       }
      ],
      "endline" : 164,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : " Creates a cursor from an already SDL_Cursor\n",
      "line" : 169,
      "char" : 5,
      "deco" : "FPS8derelict4sdl28internal9sdl_types10SDL_CursorZC3d2dQBq5Mouse6Cursor",
      "originalType" : "(SDL_Cursor* alreadyExisting)",
      "parameters" : [
       {
        "name" : "alreadyExisting",
        "deco" : "PS8derelict4sdl28internal9sdl_types10SDL_Cursor"
       }
      ],
      "endline" : 171,
      "endchar" : 5
     },
     {
      "name" : "~this",
      "kind" : "destructor",
      "comment" : " Ensures that SDL can properly dispose of the cursor\n",
      "line" : 176,
      "char" : 5,
      "deco" : "FZv",
      "endline" : 178,
      "endchar" : 5
     },
     {
      "name" : "__xdtor",
      "kind" : "alias"
     }
    ]
   },
   {
    "name" : "defaultCursor",
    "kind" : "function",
    "comment" : "\n Gets the system's default cursor\n",
    "line" : 185,
    "char" : 8,
    "deco" : "FZC3d2d4sdl25Mouse6Cursor",
    "endline" : 187,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "d2d.sdl2.Polygon",
  "kind" : "module",
  "file" : "source/d2d/sdl2/Polygon.d",
  "comment" : " Polygon\n",
  "members" : [
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 7,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.parallelism",
    "kind" : "import",
    "line" : 8,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 9,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.traits",
    "kind" : "import",
    "line" : 10,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "d2d.math.AxisAlignedBoundingBox",
    "kind" : "import",
    "line" : 11,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "d2d.math.Segment",
    "kind" : "import",
    "line" : 12,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "d2d.math.Vector",
    "kind" : "import",
    "line" : 13,
    "char" : 8,
    "protection" : "private"
   },
   {
    "kind" : "template",
    "comment" : " A polygon is an object defined by its vertices in 2 space\n T is the type of the polygon and sides is how many sides the polygon has\n TODO: upgrade to dimension-ambiguous model class in math\n",
    "line" : 20,
    "char" : 1,
    "name" : "Polygon",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     },
     {
      "name" : "numSides",
      "kind" : "value",
      "deco" : "k"
     }
    ],
    "members" : [
     {
      "name" : "Polygon",
      "kind" : "class",
      "line" : 20,
      "char" : 1,
      "members" : [
       {
        "name" : "vertices",
        "kind" : "variable",
        "comment" : "The vertices of the polygon\n",
        "line" : 22,
        "char" : 29,
        "type" : "Vector!(T, 2)[numSides]"
       },
       {
        "name" : "sides",
        "kind" : "function",
        "comment" : " Gets the sides of a polygon\n",
        "line" : 27,
        "char" : 40,
        "type" : "@property Segment!(T, 2)[numSides]()",
        "endline" : 33,
        "endchar" : 5
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "comment" : " Creates an empty polygon\n",
        "line" : 38,
        "char" : 5,
        "type" : "()",
        "endline" : 38,
        "endchar" : 13
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "comment" : " Creates a polygon using a list of vertices as vertices\n",
        "line" : 43,
        "char" : 5,
        "type" : "(Vector!(T, 2)[] vertices...)",
        "parameters" : [
         {
          "name" : "vertices",
          "type" : "Vector!(T, 2)[]"
         }
        ],
        "endline" : 46,
        "endchar" : 5
       },
       {
        "kind" : "template",
        "comment" : " Casts the polygon to a polygon of another type\n",
        "line" : 51,
        "char" : 7,
        "name" : "opCast",
        "parameters" : [
         {
          "name" : "U",
          "kind" : "type"
         }
        ],
        "constraint" : "is(U : Polygon!V, V...)",
        "members" : [
         {
          "name" : "opCast",
          "kind" : "function",
          "line" : 51,
          "char" : 7,
          "type" : "U()",
          "endline" : 54,
          "endchar" : 5
         }
        ]
       },
       {
        "kind" : "template",
        "comment" : " Returns whether or not a given point is inside the polygon\n This algorithm uses scanlining (see Renderer.fillPolygon)\n Conceptually, it draws a ray to the left from the given point; if the ray intersects the polygon an odd number of times\n the point is within the polygon\n",
        "line" : 62,
        "char" : 10,
        "name" : "contains",
        "parameters" : [
         {
          "name" : "U",
          "kind" : "type"
         }
        ],
        "members" : [
         {
          "name" : "contains",
          "kind" : "function",
          "line" : 62,
          "char" : 10,
          "type" : "bool(Vector!(U, 2) point)",
          "parameters" : [
           {
            "name" : "point",
            "type" : "Vector!(U, 2)"
           }
          ],
          "endline" : 75,
          "endchar" : 5
         }
        ]
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "comment" : " Returns the rectangle bounding a polygon\n",
    "line" : 82,
    "char" : 31,
    "name" : "bound",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     },
     {
      "name" : "sides",
      "kind" : "value",
      "deco" : "k"
     }
    ],
    "members" : [
     {
      "name" : "bound",
      "kind" : "function",
      "line" : 82,
      "char" : 31,
      "type" : "AxisAlignedBoundingBox!(T, 2)(Polygon!(T, sides) toBound)",
      "parameters" : [
       {
        "name" : "toBound",
        "type" : "Polygon!(T, sides)"
       }
      ],
      "endline" : 101,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "line" : 103,
    "char" : 1,
    "name" : "iPolygon",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "value",
      "deco" : "k"
     }
    ],
    "members" : [
     {
      "name" : "iPolygon",
      "kind" : "alias",
      "line" : 103,
      "char" : 1,
      "type" : "Polygon!(int, T)"
     }
    ]
   },
   {
    "kind" : "template",
    "line" : 104,
    "char" : 1,
    "name" : "dPolygon",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "value",
      "deco" : "k"
     }
    ],
    "members" : [
     {
      "name" : "dPolygon",
      "kind" : "alias",
      "line" : 104,
      "char" : 1,
      "type" : "Polygon!(double, T)"
     }
    ]
   },
   {
    "kind" : "template",
    "line" : 105,
    "char" : 1,
    "name" : "fPolygon",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "value",
      "deco" : "k"
     }
    ],
    "members" : [
     {
      "name" : "fPolygon",
      "kind" : "alias",
      "line" : 105,
      "char" : 1,
      "type" : "Polygon!(float, T)"
     }
    ]
   }
  ]
 },
 {
  "name" : "d2d.sdl2.Renderer",
  "kind" : "module",
  "file" : "source/d2d/sdl2/Renderer.d",
  "comment" : " Renderer\n",
  "members" : [
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.math",
    "kind" : "import",
    "line" : 7,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "d2d.sdl2",
    "kind" : "import",
    "line" : 8,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "Renderer",
    "kind" : "class",
    "comment" : " Renderers are objects that handle drawing things such as textures or shapes\n A renderer can be obtained from a window, and could be used to draw on the window\n Renderers draw using buffers; when a renderer draws, it isn't visible to the screen until the present method is called\n While most of these functions are ported directly off of LibSDL2, most of them have been renamed into standard OOP convention\n Many SDL functions are now property methods (eg. SDL_SetRenderDrawColor => renderer.drawColor = ...)\n All functions defined in renderer are based off of SDL functions and SDL documentation can be viewed as well\n TODO: implement curve drawing\n",
    "line" : 19,
    "char" : 1,
    "members" : [
     {
      "name" : "renderer",
      "kind" : "variable",
      "protection" : "private",
      "line" : 21,
      "char" : 27,
      "deco" : "PS8derelict4sdl28internal9sdl_types12SDL_Renderer",
      "offset" : 16
     },
     {
      "name" : "handle",
      "kind" : "function",
      "comment" : " Returns the raw SDL data of this object\n",
      "line" : 26,
      "char" : 29,
      "deco" : "FNdZPS8derelict4sdl28internal9sdl_types12SDL_Renderer",
      "endline" : 28,
      "endchar" : 5
     },
     {
      "name" : "drawColor",
      "kind" : "function",
      "comment" : " Sets the color of the renderer will draw with\n",
      "line" : 33,
      "char" : 20,
      "deco" : "FNdS3d2d4sdl25ColorQgZv",
      "parameters" : [
       {
        "name" : "color",
        "deco" : "S3d2d4sdl25ColorQg"
       }
      ],
      "endline" : 35,
      "endchar" : 5
     },
     {
      "name" : "drawColor",
      "kind" : "function",
      "comment" : " Returns the color that the renderer will draw with\n",
      "line" : 40,
      "char" : 21,
      "deco" : "FNdZS3d2d4sdl25ColorQg",
      "endline" : 45,
      "endchar" : 5
     },
     {
      "name" : "drawBlendMode",
      "kind" : "function",
      "comment" : " Sets the renderer's draw blend mode that affects how the renderer draws\n",
      "line" : 50,
      "char" : 20,
      "deco" : "FNdE8derelict4sdl28internal9sdl_types13SDL_BlendModeZv",
      "parameters" : [
       {
        "name" : "blendMode",
        "deco" : "E8derelict4sdl28internal9sdl_types13SDL_BlendMode"
       }
      ],
      "endline" : 52,
      "endchar" : 5
     },
     {
      "name" : "drawBlendMode",
      "kind" : "function",
      "comment" : " Gets the renderer's draw blend mode that affects how the renderer draws\n",
      "line" : 57,
      "char" : 29,
      "deco" : "FNdZE8derelict4sdl28internal9sdl_types13SDL_BlendMode",
      "endline" : 61,
      "endchar" : 5
     },
     {
      "name" : "viewport",
      "kind" : "function",
      "comment" : " Sets the viewport of the renderer to the given rectangle\n",
      "line" : 66,
      "char" : 20,
      "deco" : "FNdC3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBlZv",
      "originalType" : "@property void(iRectangle vPort)",
      "parameters" : [
       {
        "name" : "vPort",
        "deco" : "C3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBl"
       }
      ],
      "endline" : 68,
      "endchar" : 5
     },
     {
      "name" : "viewport",
      "kind" : "function",
      "comment" : " Gets the viewport of the renderer as a rectangle\n",
      "line" : 73,
      "char" : 26,
      "deco" : "FNdZC3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBl",
      "originalType" : "@property iRectangle()",
      "endline" : 77,
      "endchar" : 5
     },
     {
      "name" : "clipRect",
      "kind" : "function",
      "comment" : " Sets the clip area for the renderer\n Anything that is rendered outside of the clip area gets discarded\n",
      "line" : 83,
      "char" : 20,
      "deco" : "FNdC3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBlZv",
      "originalType" : "@property void(iRectangle clipArea)",
      "parameters" : [
       {
        "name" : "clipArea",
        "deco" : "C3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBl"
       }
      ],
      "endline" : 85,
      "endchar" : 5
     },
     {
      "name" : "clipRect",
      "kind" : "function",
      "comment" : " Gets the clip area for the renderer\n Anything that is rendered outside of the clip area gets discarded\n",
      "line" : 91,
      "char" : 26,
      "deco" : "FNdZC3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBl",
      "originalType" : "@property iRectangle()",
      "endline" : 96,
      "endchar" : 5
     },
     {
      "name" : "scale",
      "kind" : "function",
      "comment" : " Sets the renderer's x and y scale to the given point's x and y values\n",
      "line" : 101,
      "char" : 20,
      "deco" : "FNdC3d2d4math6Vector__TQkTfVki2ZQtZv",
      "originalType" : "@property void(fVector scaling)",
      "parameters" : [
       {
        "name" : "scaling",
        "deco" : "C3d2d4math6Vector__TQkTfVki2ZQt"
       }
      ],
      "endline" : 103,
      "endchar" : 5
     },
     {
      "name" : "scale",
      "kind" : "function",
      "comment" : " Gets the renderer's x and y scale as a point with the scales as the x and y coordinates\n",
      "line" : 108,
      "char" : 23,
      "deco" : "FNdZC3d2d4math6Vector__TQkTfVki2ZQt",
      "originalType" : "@property fVector()",
      "endline" : 112,
      "endchar" : 5
     },
     {
      "name" : "logicalSize",
      "kind" : "function",
      "comment" : " Sets the renderer's logical size\n Logical size works in that you only need to give coordinates for one specific resolution, and SDL will handle scaling that to the best resolution matching the logical size's aspect ratio\n",
      "line" : 118,
      "char" : 20,
      "deco" : "FNdC3d2d4math6Vector__TQkTiVki2ZQtZv",
      "originalType" : "@property void(iVector dimensions)",
      "parameters" : [
       {
        "name" : "dimensions",
        "deco" : "C3d2d4math6Vector__TQkTiVki2ZQt"
       }
      ],
      "endline" : 120,
      "endchar" : 5
     },
     {
      "name" : "logicalSize",
      "kind" : "function",
      "comment" : " Gets the renderer's logical size\n Logical size works in that you only need to give coordinates for one specific resolution, and SDL will handle scaling that to the best resolution matching the logical size's aspect ratio\n",
      "line" : 126,
      "char" : 23,
      "deco" : "FNdZC3d2d4math6Vector__TQkTiVki2ZQt",
      "originalType" : "@property iVector()",
      "endline" : 130,
      "endchar" : 5
     },
     {
      "name" : "outputSize",
      "kind" : "function",
      "comment" : " Gets the renderer's output size\n",
      "line" : 135,
      "char" : 23,
      "deco" : "FNdZC3d2d4math6Vector__TQkTiVki2ZQt",
      "originalType" : "@property iVector()",
      "endline" : 139,
      "endchar" : 5
     },
     {
      "name" : "info",
      "kind" : "function",
      "comment" : " Gets the renderer's information and returns it as an SDL_RendererInfo struct\n",
      "line" : 144,
      "char" : 32,
      "deco" : "FNdZS8derelict4sdl28internal9sdl_types16SDL_RendererInfo",
      "endline" : 148,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : " Makes an SDL renderer for a window\n",
      "line" : 153,
      "char" : 5,
      "deco" : "FC3d2d4sdl26WindowQhkZCQvQt8RendererQj",
      "originalType" : "(Window window, uint flags = 0)",
      "parameters" : [
       {
        "name" : "window",
        "deco" : "C3d2d4sdl26WindowQh"
       },
       {
        "name" : "flags",
        "deco" : "k",
        "default" : "0u"
       }
      ],
      "endline" : 156,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : " Makes a renderer from an already existing SDL_Renderer\n",
      "line" : 161,
      "char" : 5,
      "deco" : "FPS8derelict4sdl28internal9sdl_types12SDL_RendererZC3d2dQBs8RendererQj",
      "originalType" : "(SDL_Renderer* alreadyExisting)",
      "parameters" : [
       {
        "name" : "alreadyExisting",
        "deco" : "PS8derelict4sdl28internal9sdl_types12SDL_Renderer"
       }
      ],
      "endline" : 163,
      "endchar" : 5
     },
     {
      "name" : "~this",
      "kind" : "destructor",
      "comment" : " Ensures that SDL can properly dispose of the renderer\n",
      "line" : 168,
      "char" : 5,
      "deco" : "FZv",
      "endline" : 170,
      "endchar" : 5
     },
     {
      "name" : "copy",
      "kind" : "function",
      "comment" : " Copies a texture to the window at the given point\n Uses the dimensions of the given sourceRect or if not given, the dimensions of the original texture\n",
      "line" : 176,
      "char" : 10,
      "deco" : "FC3d2d4sdl27TextureQiiiCQw4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBlZv",
      "originalType" : "void(Texture texture, int x, int y, iRectangle sourceRect = null)",
      "parameters" : [
       {
        "name" : "texture",
        "deco" : "C3d2d4sdl27TextureQi"
       },
       {
        "name" : "x",
        "deco" : "i"
       },
       {
        "name" : "y",
        "deco" : "i"
       },
       {
        "name" : "sourceRect",
        "deco" : "C3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBl",
        "default" : "null"
       }
      ],
      "endline" : 179,
      "endchar" : 5
     },
     {
      "name" : "copy",
      "kind" : "function",
      "comment" : " Copies a texture to the window at the given rectangle\n If sourceRect is null, it will copy the entire texture, otherwise, it will copy the slice defined by sourceRect\n",
      "line" : 185,
      "char" : 10,
      "deco" : "FC3d2d4sdl27TextureQiCQu4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBlQBwZv",
      "originalType" : "void(Texture texture, iRectangle destinationRect, iRectangle sourceRect = null)",
      "parameters" : [
       {
        "name" : "texture",
        "deco" : "C3d2d4sdl27TextureQi"
       },
       {
        "name" : "destinationRect",
        "deco" : "C3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBl"
       },
       {
        "name" : "sourceRect",
        "deco" : "C3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBl",
        "default" : "null"
       }
      ],
      "endline" : 188,
      "endchar" : 5
     },
     {
      "name" : "copy",
      "kind" : "function",
      "comment" : " Copies a texture to the window at the given rectangle with the given angle\n If sourceRect is null, it will copy the entire texture, otherwise, it will copy the slice defined by sourceRect\n Angles are given in radians\n",
      "line" : 195,
      "char" : 10,
      "deco" : "FC3d2d4sdl27TextureQiCQu4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBldE8derelictQCw8internal9sdl_types16SDL_RendererFlipCQEpQDw6Vector__TQkTiVki2ZQtQExZv",
      "originalType" : "void(Texture texture, iRectangle destinationRect, double angle, SDL_RendererFlip flip = SDL_FLIP_NONE, iVector center = null, iRectangle sourceRect = null)",
      "parameters" : [
       {
        "name" : "texture",
        "deco" : "C3d2d4sdl27TextureQi"
       },
       {
        "name" : "destinationRect",
        "deco" : "C3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBl"
       },
       {
        "name" : "angle",
        "deco" : "d"
       },
       {
        "name" : "flip",
        "deco" : "E8derelict4sdl28internal9sdl_types16SDL_RendererFlip",
        "default" : "cast(SDL_RendererFlip)0"
       },
       {
        "name" : "center",
        "deco" : "C3d2d4math6Vector__TQkTiVki2ZQt",
        "default" : "null"
       },
       {
        "name" : "sourceRect",
        "deco" : "C3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBl",
        "default" : "null"
       }
      ],
      "endline" : 201,
      "endchar" : 5
     },
     {
      "name" : "performWithColor",
      "kind" : "function",
      "protection" : "private",
      "comment" : " Internally used function that performs an action with a certain color\n",
      "line" : 206,
      "char" : 18,
      "deco" : "FS3d2d4sdl25ColorQgDFZvZv",
      "parameters" : [
       {
        "name" : "color",
        "deco" : "S3d2d4sdl25ColorQg"
       },
       {
        "name" : "action",
        "deco" : "DFZv"
       }
      ],
      "endline" : 211,
      "endchar" : 5
     },
     {
      "name" : "clear",
      "kind" : "function",
      "comment" : " Fills the screen with the existing renderer color\n",
      "line" : 216,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 218,
      "endchar" : 5
     },
     {
      "name" : "clear",
      "kind" : "function",
      "comment" : " Sets the renderer's color and clears the screen\n",
      "line" : 223,
      "char" : 10,
      "deco" : "FS3d2d4sdl25ColorQgZv",
      "parameters" : [
       {
        "name" : "color",
        "deco" : "S3d2d4sdl25ColorQg"
       }
      ],
      "endline" : 225,
      "endchar" : 5
     },
     {
      "name" : "draw",
      "kind" : "function",
      "comment" : " Draws a line between the given points\n",
      "line" : 230,
      "char" : 10,
      "deco" : "FC3d2d4math6Vector__TQkTiVki2ZQtQBfZv",
      "originalType" : "void(iVector first, iVector second)",
      "parameters" : [
       {
        "name" : "first",
        "deco" : "C3d2d4math6Vector__TQkTiVki2ZQt"
       },
       {
        "name" : "second",
        "deco" : "C3d2d4math6Vector__TQkTiVki2ZQt"
       }
      ],
      "endline" : 232,
      "endchar" : 5
     },
     {
      "name" : "draw",
      "kind" : "function",
      "comment" : " Draws a line of a given color between the given points\n",
      "line" : 237,
      "char" : 10,
      "deco" : "FC3d2d4math6Vector__TQkTiVki2ZQtQBfSQBi4sdl25ColorQgZv",
      "originalType" : "void(iVector first, iVector second, Color color)",
      "parameters" : [
       {
        "name" : "first",
        "deco" : "C3d2d4math6Vector__TQkTiVki2ZQt"
       },
       {
        "name" : "second",
        "deco" : "C3d2d4math6Vector__TQkTiVki2ZQt"
       },
       {
        "name" : "color",
        "deco" : "S3d2d4sdl25ColorQg"
       }
      ],
      "endline" : 239,
      "endchar" : 5
     },
     {
      "name" : "draw",
      "kind" : "function",
      "comment" : " Draws a line given a segment\n",
      "line" : 244,
      "char" : 10,
      "deco" : "FC3d2d4math7Segment__TQlTiVki2ZQuZv",
      "originalType" : "void(iSegment line)",
      "parameters" : [
       {
        "name" : "line",
        "deco" : "C3d2d4math7Segment__TQlTiVki2ZQu"
       }
      ],
      "endline" : 246,
      "endchar" : 5
     },
     {
      "name" : "draw",
      "kind" : "function",
      "comment" : " Draws a line with a specific color\n",
      "line" : 251,
      "char" : 10,
      "deco" : "FC3d2d4math7Segment__TQlTiVki2ZQuSQBg4sdl25ColorQgZv",
      "originalType" : "void(iSegment line, Color color)",
      "parameters" : [
       {
        "name" : "line",
        "deco" : "C3d2d4math7Segment__TQlTiVki2ZQu"
       },
       {
        "name" : "color",
        "deco" : "S3d2d4sdl25ColorQg"
       }
      ],
      "endline" : 253,
      "endchar" : 5
     },
     {
      "name" : "draw",
      "kind" : "function",
      "comment" : " Draws a point\n",
      "line" : 258,
      "char" : 10,
      "deco" : "FiiZv",
      "parameters" : [
       {
        "name" : "x",
        "deco" : "i"
       },
       {
        "name" : "y",
        "deco" : "i"
       }
      ],
      "endline" : 260,
      "endchar" : 5
     },
     {
      "name" : "draw",
      "kind" : "function",
      "comment" : " Draws a point\n",
      "line" : 265,
      "char" : 10,
      "deco" : "FC3d2d4math6Vector__TQkTiVki2ZQtZv",
      "originalType" : "void(iVector toDraw)",
      "parameters" : [
       {
        "name" : "toDraw",
        "deco" : "C3d2d4math6Vector__TQkTiVki2ZQt"
       }
      ],
      "endline" : 267,
      "endchar" : 5
     },
     {
      "name" : "draw",
      "kind" : "function",
      "comment" : " Draws a point in the given color\n",
      "line" : 272,
      "char" : 10,
      "deco" : "FC3d2d4math6Vector__TQkTiVki2ZQtSQBf4sdl25ColorQgZv",
      "originalType" : "void(iVector toDraw, Color color)",
      "parameters" : [
       {
        "name" : "toDraw",
        "deco" : "C3d2d4math6Vector__TQkTiVki2ZQt"
       },
       {
        "name" : "color",
        "deco" : "S3d2d4sdl25ColorQg"
       }
      ],
      "endline" : 274,
      "endchar" : 5
     },
     {
      "name" : "draw",
      "kind" : "function",
      "comment" : " Draws a rectangle\n",
      "line" : 279,
      "char" : 10,
      "deco" : "FC3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBlZv",
      "originalType" : "void(iRectangle toDraw)",
      "parameters" : [
       {
        "name" : "toDraw",
        "deco" : "C3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBl"
       }
      ],
      "endline" : 281,
      "endchar" : 5
     },
     {
      "name" : "draw",
      "kind" : "function",
      "comment" : " Draws a rectangle with the given color\n",
      "line" : 286,
      "char" : 10,
      "deco" : "FC3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBlSQBy4sdl25ColorQgZv",
      "originalType" : "void(iRectangle toDraw, Color color)",
      "parameters" : [
       {
        "name" : "toDraw",
        "deco" : "C3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBl"
       },
       {
        "name" : "color",
        "deco" : "S3d2d4sdl25ColorQg"
       }
      ],
      "endline" : 288,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "comment" : " Draws the given bezier curve with numPoints number of points on the curve\n More points is smoother but slower\n",
      "line" : 294,
      "char" : 10,
      "name" : "draw",
      "parameters" : [
       {
        "name" : "numPoints",
        "kind" : "value",
        "deco" : "k",
        "defaultValue" : "100"
       }
      ],
      "members" : [
       {
        "name" : "draw",
        "kind" : "function",
        "line" : 294,
        "char" : 10,
        "type" : "void(BezierCurve!(int, 2) curve)",
        "parameters" : [
         {
          "name" : "curve",
          "type" : "BezierCurve!(int, 2)"
         }
        ],
        "endline" : 299,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "comment" : " Draws the given bezier curve with the given color and amount of points on the curve\n More points is smoother but slower\n",
      "line" : 305,
      "char" : 10,
      "name" : "draw",
      "parameters" : [
       {
        "name" : "numPoints",
        "kind" : "value",
        "deco" : "k",
        "defaultValue" : "100"
       }
      ],
      "members" : [
       {
        "name" : "draw",
        "kind" : "function",
        "line" : 305,
        "char" : 10,
        "type" : "void(BezierCurve!(int, 2) curve, Color color)",
        "parameters" : [
         {
          "name" : "curve",
          "type" : "BezierCurve!(int, 2)"
         },
         {
          "name" : "color",
          "type" : "Color"
         }
        ],
        "endline" : 307,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "fill",
      "kind" : "function",
      "comment" : " Fills a rectangle in\n",
      "line" : 312,
      "char" : 10,
      "deco" : "FC3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBlZv",
      "originalType" : "void(iRectangle toFill)",
      "parameters" : [
       {
        "name" : "toFill",
        "deco" : "C3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBl"
       }
      ],
      "endline" : 314,
      "endchar" : 5
     },
     {
      "name" : "fill",
      "kind" : "function",
      "comment" : " Fills a rectangle in with the given color\n",
      "line" : 319,
      "char" : 10,
      "deco" : "FC3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBlSQBy4sdl25ColorQgZv",
      "originalType" : "void(iRectangle toFill, Color color)",
      "parameters" : [
       {
        "name" : "toFill",
        "deco" : "C3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBl"
       },
       {
        "name" : "color",
        "deco" : "S3d2d4sdl25ColorQg"
       }
      ],
      "endline" : 321,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "comment" : " Draws a polygon\n",
      "line" : 326,
      "char" : 10,
      "name" : "draw",
      "parameters" : [
       {
        "name" : "sides",
        "kind" : "value",
        "deco" : "k"
       }
      ],
      "members" : [
       {
        "name" : "draw",
        "kind" : "function",
        "line" : 326,
        "char" : 10,
        "type" : "void(iPolygon!sides toDraw)",
        "parameters" : [
         {
          "name" : "toDraw",
          "type" : "iPolygon!sides"
         }
        ],
        "endline" : 330,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "comment" : " Draws a polygon with the given color\n",
      "line" : 335,
      "char" : 10,
      "name" : "draw",
      "parameters" : [
       {
        "name" : "sides",
        "kind" : "value",
        "deco" : "k"
       }
      ],
      "members" : [
       {
        "name" : "draw",
        "kind" : "function",
        "line" : 335,
        "char" : 10,
        "type" : "void(iPolygon!sides toDraw, Color color)",
        "parameters" : [
         {
          "name" : "toDraw",
          "type" : "iPolygon!sides"
         },
         {
          "name" : "color",
          "type" : "Color"
         }
        ],
        "endline" : 337,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "comment" : " Draws the ellipse bounded by the given box between the given angles in radians\n More points generally means a slower but more well drawn ellipse\n",
      "line" : 343,
      "char" : 10,
      "name" : "draw",
      "parameters" : [
       {
        "name" : "numPoints",
        "kind" : "value",
        "deco" : "k",
        "defaultValue" : "100"
       }
      ],
      "members" : [
       {
        "name" : "draw",
        "kind" : "function",
        "line" : 343,
        "char" : 10,
        "type" : "void(iRectangle bounds, double startAngle, double endAngle)",
        "parameters" : [
         {
          "name" : "bounds",
          "type" : "iRectangle"
         },
         {
          "name" : "startAngle",
          "deco" : "d"
         },
         {
          "name" : "endAngle",
          "deco" : "d"
         }
        ],
        "endline" : 357,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "comment" : " Draws the ellipse bounded by the given box between the given angles in radians with the given color\n More points generally means a slower but more well drawn ellipse\n",
      "line" : 363,
      "char" : 10,
      "name" : "draw",
      "parameters" : [
       {
        "name" : "numPoints",
        "kind" : "value",
        "deco" : "k",
        "defaultValue" : "100"
       }
      ],
      "members" : [
       {
        "name" : "draw",
        "kind" : "function",
        "line" : 363,
        "char" : 10,
        "type" : "void(iRectangle bounds, double startAngle, double endAngle, Color color)",
        "parameters" : [
         {
          "name" : "bounds",
          "type" : "iRectangle"
         },
         {
          "name" : "startAngle",
          "deco" : "d"
         },
         {
          "name" : "endAngle",
          "deco" : "d"
         },
         {
          "name" : "color",
          "type" : "Color"
         }
        ],
        "endline" : 368,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "comment" : " Fills the ellipse bounded by the given box between the given angles in radians\n Fills the ellipse between the arc endpoints: fills ellipse as arc rather than filling as ellipse (not a pizza slice)\n More points generally means a slower but more well drawn ellipse\n",
      "line" : 375,
      "char" : 10,
      "name" : "fill",
      "parameters" : [
       {
        "name" : "numPoints",
        "kind" : "value",
        "deco" : "k",
        "defaultValue" : "100"
       }
      ],
      "members" : [
       {
        "name" : "fill",
        "kind" : "function",
        "line" : 375,
        "char" : 10,
        "type" : "void(iRectangle bounds, double startAngle, double endAngle)",
        "parameters" : [
         {
          "name" : "bounds",
          "type" : "iRectangle"
         },
         {
          "name" : "startAngle",
          "deco" : "d"
         },
         {
          "name" : "endAngle",
          "deco" : "d"
         }
        ],
        "endline" : 385,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "comment" : " Fills the ellipse bounded by the given box between the given angles in radians with the given color\n Fills the ellipse between the arc endpoints: fills ellipse as arc rather than filling as ellipse (not a pizza slice)\n More points generally means a slower but more well drawn ellipse\n",
      "line" : 392,
      "char" : 10,
      "name" : "fill",
      "parameters" : [
       {
        "name" : "numPoints",
        "kind" : "value",
        "deco" : "k",
        "defaultValue" : "100"
       }
      ],
      "members" : [
       {
        "name" : "fill",
        "kind" : "function",
        "line" : 392,
        "char" : 10,
        "type" : "void(iRectangle bounds, double startAngle, double endAngle, Color color)",
        "parameters" : [
         {
          "name" : "bounds",
          "type" : "iRectangle"
         },
         {
          "name" : "startAngle",
          "deco" : "d"
         },
         {
          "name" : "endAngle",
          "deco" : "d"
         },
         {
          "name" : "color",
          "type" : "Color"
         }
        ],
        "endline" : 397,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "comment" : " Fills a polygon\n Uses scanlining\n",
      "line" : 403,
      "char" : 10,
      "name" : "fill",
      "parameters" : [
       {
        "name" : "sides",
        "kind" : "value",
        "deco" : "k"
       }
      ],
      "members" : [
       {
        "name" : "fill",
        "kind" : "function",
        "line" : 403,
        "char" : 10,
        "type" : "void(iPolygon!sides toDraw)",
        "parameters" : [
         {
          "name" : "toDraw",
          "type" : "iPolygon!sides"
         }
        ],
        "endline" : 435,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "comment" : " Fills a polygon with a given color\n",
      "line" : 440,
      "char" : 10,
      "name" : "fill",
      "parameters" : [
       {
        "name" : "sides",
        "kind" : "value",
        "deco" : "k"
       }
      ],
      "members" : [
       {
        "name" : "fill",
        "kind" : "function",
        "line" : 440,
        "char" : 10,
        "type" : "void(iPolygon!sides toDraw, Color color)",
        "parameters" : [
         {
          "name" : "toDraw",
          "type" : "iPolygon!sides"
         },
         {
          "name" : "color",
          "type" : "Color"
         }
        ],
        "endline" : 442,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "present",
      "kind" : "function",
      "comment" : " Updates what the renderer has drawn by actually outputting or presenting it\n",
      "line" : 447,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 450,
      "endchar" : 5
     },
     {
      "name" : "__xdtor",
      "kind" : "alias"
     }
    ]
   }
  ]
 },
 {
  "name" : "d2d.sdl2.Sound",
  "kind" : "module",
  "file" : "source/d2d/sdl2/Sound.d",
  "comment" : " Sound\n",
  "members" : [
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 7,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.string",
    "kind" : "import",
    "line" : 8,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.traits",
    "kind" : "import",
    "line" : 9,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "d2d.sdl2",
    "kind" : "import",
    "line" : 10,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "SoundType",
    "kind" : "enum",
    "comment" : " The two types of sounds there are\n Chunks are for sound effects and for shorter sounds\n Musics are for longer sounds such as background music\n Multiple chunks can play at once, but only one music can be playing at a time\n",
    "line" : 18,
    "char" : 1,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "Chunk",
      "kind" : "enum member",
      "value" : "0",
      "line" : 19,
      "char" : 5
     },
     {
      "name" : "Music",
      "kind" : "enum member",
      "value" : "1",
      "line" : 20,
      "char" : 5
     }
    ]
   },
   {
    "kind" : "template",
    "comment" : " A sound is, as its name suggests, something that can be played and make a noise\n Sounds are templated and can either be chunks or musics\n A chunk sound is a short sound that is usually a sound effect or something quick; many chunks can play at once\n A chunk will only play once\n A music is something that usually plays for longer and is usually something like background music; only one sound can play at once\n A music will loop infinitely until destroyed\n This sound is a primitive port from SDL and doesn't allow for much control\n There is no constructor for a sound from an already existing Mix_Chunk or Mix_Music because it may have unintended behaviour\n",
    "line" : 33,
    "char" : 1,
    "name" : "Sound",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "value",
      "deco" : "E3d2d4sdl25Sound9SoundType"
     }
    ],
    "members" : [
     {
      "name" : "Sound",
      "kind" : "class",
      "line" : 33,
      "char" : 1,
      "members" : [
       {
        "name" : "this",
        "kind" : "constructor",
        "comment" : " Makes the sound given the string of the path of the sound\n If this is a music sound, the music will loop; otherwise if this is a chunk, the chunk will play once\n",
        "line" : 48,
        "char" : 5,
        "type" : "(string soundPath)",
        "parameters" : [
         {
          "name" : "soundPath",
          "type" : "string"
         }
        ],
        "endline" : 60,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "comment" : "\n Pauses all sounds of a type\n There is no implementation to pause certain sounds selectively\n Only the music is individually controllable\n For chunks, chunks are collectively paused and unpaused\n",
    "line" : 76,
    "char" : 6,
    "name" : "pause",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "value",
      "deco" : "E3d2d4sdl25Sound9SoundType"
     }
    ],
    "members" : [
     {
      "name" : "pause",
      "kind" : "function",
      "line" : 76,
      "char" : 6,
      "type" : "void()",
      "endline" : 83,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "comment" : "\n Resumes all sounds of a type\n There is no implementation to resume certain sounds selectively\n Only the music is individually controllable\n For chunks, chunks are collectively paused and unpaused\n",
    "line" : 91,
    "char" : 6,
    "name" : "resume",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "value",
      "deco" : "E3d2d4sdl25Sound9SoundType"
     }
    ],
    "members" : [
     {
      "name" : "resume",
      "kind" : "function",
      "line" : 91,
      "char" : 6,
      "type" : "void()",
      "endline" : 98,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "_chunkVolume",
    "kind" : "variable",
    "protection" : "private",
    "line" : 100,
    "char" : 13,
    "deco" : "i",
    "init" : "128"
   },
   {
    "name" : "_musicVolume",
    "kind" : "variable",
    "protection" : "private",
    "line" : 101,
    "char" : 13,
    "deco" : "i",
    "init" : "128"
   },
   {
    "name" : "chunkVolume",
    "kind" : "function",
    "comment" : " Sets the volume that all chunks will play at\n Chunks are all at the same volume; there is no implementation to control the volume of an individual chunk\n TODO possibly implement Mix_VolumeChunk?\n",
    "line" : 108,
    "char" : 16,
    "deco" : "FNdiZv",
    "parameters" : [
     {
      "name" : "volume",
      "deco" : "i"
     }
    ],
    "endline" : 111,
    "endchar" : 1
   },
   {
    "name" : "chunkVolume",
    "kind" : "function",
    "comment" : " Gets the volume that all chunks will play at\n Chunks are all at the same volume; there is no implementation to control the volume of an individual chunk\n TODO possibly implement Mix_VolumeChunk?\n",
    "line" : 118,
    "char" : 15,
    "deco" : "FNdZi",
    "endline" : 120,
    "endchar" : 1
   },
   {
    "name" : "musicVolume",
    "kind" : "function",
    "comment" : " Sets the volume that the music will play at\n",
    "line" : 125,
    "char" : 16,
    "deco" : "FNdiZv",
    "parameters" : [
     {
      "name" : "volume",
      "deco" : "i"
     }
    ],
    "endline" : 128,
    "endchar" : 1
   },
   {
    "name" : "musicVolume",
    "kind" : "function",
    "comment" : " Gets the volume that the music will play at\n",
    "line" : 133,
    "char" : 15,
    "deco" : "FNdZi",
    "endline" : 135,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "d2d.sdl2.Surface",
  "kind" : "module",
  "file" : "source/d2d/sdl2/Surface.d",
  "comment" : " Surface\n",
  "members" : [
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.range",
    "kind" : "import",
    "line" : 7,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.string",
    "kind" : "import",
    "line" : 8,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "d2d.sdl2",
    "kind" : "import",
    "line" : 9,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "Surface",
    "kind" : "class",
    "comment" : " Surfaces are a rectangular collection of pixels\n Surfaces are easy to work with and edit and can be blitted on to another surface\n Surfaces can also be converted to textures which are more efficient but less flexible\n Surfaces are handled in software as opposed to textures which are handled in hardware\n Surfaces can be used, but when used repeatedly and stored, textures should be preferred\n Surface draw methods do not respect alpha, but surface blitting does; to draw with alpha, draw to another surface, and blit to desired surface\n",
    "line" : 19,
    "char" : 1,
    "members" : [
     {
      "name" : "surface",
      "kind" : "variable",
      "protection" : "private",
      "line" : 21,
      "char" : 26,
      "deco" : "PS8derelict4sdl28internal9sdl_types11SDL_Surface",
      "offset" : 16
     },
     {
      "name" : "handle",
      "kind" : "function",
      "comment" : " Returns the raw SDL data of this object\n",
      "line" : 26,
      "char" : 28,
      "deco" : "FNdZPS8derelict4sdl28internal9sdl_types11SDL_Surface",
      "endline" : 28,
      "endchar" : 5
     },
     {
      "name" : "dimensions",
      "kind" : "function",
      "comment" : " Gets the surfaces dimensions as a vector with width as the x component and height as the y component\n",
      "line" : 33,
      "char" : 23,
      "deco" : "FNdZC3d2d4math6Vector__TQkTiVki2ZQt",
      "originalType" : "@property iVector()",
      "endline" : 35,
      "endchar" : 5
     },
     {
      "name" : "alphaMod",
      "kind" : "function",
      "comment" : " Sets the alpha modifier for the surface\n Alpha modification works by multiplying the alphaMultiplier / 255 into the surface pixels\n",
      "line" : 41,
      "char" : 20,
      "deco" : "FNdhZv",
      "parameters" : [
       {
        "name" : "alphaMultiplier",
        "deco" : "h"
       }
      ],
      "endline" : 43,
      "endchar" : 5
     },
     {
      "name" : "alphaMod",
      "kind" : "function",
      "comment" : " Gets the alpha modifier for the surface\n Alpha modification works by multiplying the alphaMultiplier / 255 into the surface pixels\n",
      "line" : 49,
      "char" : 21,
      "deco" : "FNdZh",
      "endline" : 53,
      "endchar" : 5
     },
     {
      "name" : "blendMode",
      "kind" : "function",
      "comment" : " Sets the surface's blend mode\n",
      "line" : 58,
      "char" : 20,
      "deco" : "FNdE8derelict4sdl28internal9sdl_types13SDL_BlendModeZv",
      "parameters" : [
       {
        "name" : "bMode",
        "deco" : "E8derelict4sdl28internal9sdl_types13SDL_BlendMode"
       }
      ],
      "endline" : 60,
      "endchar" : 5
     },
     {
      "name" : "blendMode",
      "kind" : "function",
      "comment" : " Gets the surface's blend mode\n",
      "line" : 65,
      "char" : 29,
      "deco" : "FNdZE8derelict4sdl28internal9sdl_types13SDL_BlendMode",
      "endline" : 69,
      "endchar" : 5
     },
     {
      "name" : "clipRect",
      "kind" : "function",
      "comment" : " Sets the clip boundaries for the surface\n Anything put on the surface outside of the clip boundaries gets discarded\n",
      "line" : 75,
      "char" : 20,
      "deco" : "FNdC3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBlZv",
      "originalType" : "@property void(iRectangle clipArea)",
      "parameters" : [
       {
        "name" : "clipArea",
        "deco" : "C3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBl"
       }
      ],
      "endline" : 77,
      "endchar" : 5
     },
     {
      "name" : "clipRect",
      "kind" : "function",
      "comment" : " Gets the clip boundaries for the surface\n Anything put on the surface outside of the clip boundaries gets discarded\n",
      "line" : 83,
      "char" : 26,
      "deco" : "FNdZC3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBl",
      "originalType" : "@property iRectangle()",
      "endline" : 87,
      "endchar" : 5
     },
     {
      "name" : "colorMod",
      "kind" : "function",
      "comment" : " Sets the color modifier for the surface\n Color modification works by multiplying the colorMultiplier / 255 into the surface pixels\n",
      "line" : 93,
      "char" : 20,
      "deco" : "FNdS3d2d4sdl25ColorQgZv",
      "parameters" : [
       {
        "name" : "colorMultiplier",
        "deco" : "S3d2d4sdl25ColorQg"
       }
      ],
      "endline" : 96,
      "endchar" : 5
     },
     {
      "name" : "colorMod",
      "kind" : "function",
      "comment" : " Gets the color modifier for the surface\n Color modification works by multiplying the colorMultiplier / 255 into the surface pixels\n",
      "line" : 102,
      "char" : 21,
      "deco" : "FNdZS3d2d4sdl25ColorQg",
      "endline" : 107,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : " Creates an RGB surface given at least a width and a height\n",
      "line" : 112,
      "char" : 5,
      "deco" : "FiiikkkkkZC3d2d4sdl27SurfaceQi",
      "originalType" : "(int width, int height, int depth = 32, uint flags = 0, uint Rmask = 0, uint Gmask = 0, uint Bmask = 0, uint Amask = 0)",
      "parameters" : [
       {
        "name" : "width",
        "deco" : "i"
       },
       {
        "name" : "height",
        "deco" : "i"
       },
       {
        "name" : "depth",
        "deco" : "i",
        "default" : "32"
       },
       {
        "name" : "flags",
        "deco" : "k",
        "default" : "0u"
       },
       {
        "name" : "Rmask",
        "deco" : "k",
        "default" : "0u"
       },
       {
        "name" : "Gmask",
        "deco" : "k",
        "default" : "0u"
       },
       {
        "name" : "Bmask",
        "deco" : "k",
        "default" : "0u"
       },
       {
        "name" : "Amask",
        "deco" : "k",
        "default" : "0u"
       }
      ],
      "endline" : 117,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : " Creates an RGB surface given at least a width, height, and an SDL_PixelFormatEnum\n",
      "line" : 122,
      "char" : 5,
      "deco" : "FiikikZC3d2d4sdl27SurfaceQi",
      "originalType" : "(int width, int height, uint format, int depth = 32, uint flags = 0)",
      "parameters" : [
       {
        "name" : "width",
        "deco" : "i"
       },
       {
        "name" : "height",
        "deco" : "i"
       },
       {
        "name" : "format",
        "deco" : "k"
       },
       {
        "name" : "depth",
        "deco" : "i",
        "default" : "32"
       },
       {
        "name" : "flags",
        "deco" : "k",
        "default" : "0u"
       }
      ],
      "endline" : 126,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : " Creates a surface from another surface but with a different pixel format\n",
      "line" : 131,
      "char" : 5,
      "deco" : "FC3d2d4sdl27SurfaceQiPS8derelictQBa8internal9sdl_types15SDL_PixelFormatkZQCu",
      "originalType" : "(Surface src, SDL_PixelFormat* fmt, uint flags = 0)",
      "parameters" : [
       {
        "name" : "src",
        "deco" : "C3d2d4sdl27SurfaceQi"
       },
       {
        "name" : "fmt",
        "deco" : "PS8derelict4sdl28internal9sdl_types15SDL_PixelFormat"
       },
       {
        "name" : "flags",
        "deco" : "k",
        "default" : "0u"
       }
      ],
      "endline" : 134,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : " Creates a surface from another surface but with a different pixel format\n",
      "line" : 139,
      "char" : 5,
      "deco" : "FC3d2d4sdl27SurfaceQikkZQx",
      "originalType" : "(Surface src, uint fmt, uint flags = 0)",
      "parameters" : [
       {
        "name" : "src",
        "deco" : "C3d2d4sdl27SurfaceQi"
       },
       {
        "name" : "fmt",
        "deco" : "k"
       },
       {
        "name" : "flags",
        "deco" : "k",
        "default" : "0u"
       }
      ],
      "endline" : 142,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : " Creates a surface from a BMP file path; for other image formats, use loadImage\n",
      "line" : 147,
      "char" : 5,
      "deco" : "FAyaZC3d2d4sdl27SurfaceQi",
      "originalType" : "(string bmpFilePath)",
      "parameters" : [
       {
        "name" : "bmpFilePath",
        "deco" : "Aya"
       }
      ],
      "endline" : 150,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : " Creates a surface from an already existing SDL_Surface\n",
      "line" : 155,
      "char" : 5,
      "deco" : "FPS8derelict4sdl28internal9sdl_types11SDL_SurfaceZC3d2dQBr7SurfaceQi",
      "originalType" : "(SDL_Surface* alreadyExisting)",
      "parameters" : [
       {
        "name" : "alreadyExisting",
        "deco" : "PS8derelict4sdl28internal9sdl_types11SDL_Surface"
       }
      ],
      "endline" : 157,
      "endchar" : 5
     },
     {
      "name" : "~this",
      "kind" : "destructor",
      "comment" : " Ensures that SDL can properly dispose of the surface\n",
      "line" : 162,
      "char" : 5,
      "deco" : "FZv",
      "endline" : 164,
      "endchar" : 5
     },
     {
      "name" : "saveBMP",
      "kind" : "function",
      "comment" : " Saves the surface as a BMP with the given file name\n",
      "line" : 169,
      "char" : 10,
      "deco" : "FAyaZv",
      "parameters" : [
       {
        "name" : "fileName",
        "deco" : "Aya"
       }
      ],
      "endline" : 171,
      "endchar" : 5
     },
     {
      "name" : "blit",
      "kind" : "function",
      "comment" : " Blits another surface onto this surface\n Takes the surface to blit, the slice of the surface to blit, and where on this surface to blit to\n Is faster than a scaled blit to a rectangle\n",
      "line" : 178,
      "char" : 10,
      "deco" : "FC3d2d4sdl27SurfaceQiCQu4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBliiZv",
      "originalType" : "void(Surface src, iRectangle srcRect, int dstX, int dstY)",
      "parameters" : [
       {
        "name" : "src",
        "deco" : "C3d2d4sdl27SurfaceQi"
       },
       {
        "name" : "srcRect",
        "deco" : "C3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBl"
       },
       {
        "name" : "dstX",
        "deco" : "i"
       },
       {
        "name" : "dstY",
        "deco" : "i"
       }
      ],
      "endline" : 182,
      "endchar" : 5
     },
     {
      "name" : "blit",
      "kind" : "function",
      "comment" : " Does a scaled blit from another surface onto this surface\n Takes the surface to blit, the slice of the surface to blit, and the slice on this surface of where to blit to\n Is slower than the blit to a location\n",
      "line" : 189,
      "char" : 10,
      "deco" : "FC3d2d4sdl27SurfaceQiCQu4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBlQBwZv",
      "originalType" : "void(Surface src, iRectangle srcRect, iRectangle dstRect)",
      "parameters" : [
       {
        "name" : "src",
        "deco" : "C3d2d4sdl27SurfaceQi"
       },
       {
        "name" : "srcRect",
        "deco" : "C3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBl"
       },
       {
        "name" : "dstRect",
        "deco" : "C3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBl"
       }
      ],
      "endline" : 192,
      "endchar" : 5
     },
     {
      "name" : "fill",
      "kind" : "function",
      "comment" : " Fills a rectangle of the surface with the given color\n Due to how SDL surfaces work, all other drawing functions on surface are built with this one\n",
      "line" : 198,
      "char" : 10,
      "deco" : "FC3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBlSQBy4sdl25ColorQgZv",
      "originalType" : "void(iRectangle destination, Color color)",
      "parameters" : [
       {
        "name" : "destination",
        "deco" : "C3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBl"
       },
       {
        "name" : "color",
        "deco" : "S3d2d4sdl25ColorQg"
       }
      ],
      "endline" : 202,
      "endchar" : 5
     },
     {
      "name" : "draw",
      "kind" : "function",
      "comment" : " Draws a point on the surface with the given color\n",
      "line" : 207,
      "char" : 10,
      "deco" : "FiiS3d2d4sdl25ColorQgZv",
      "parameters" : [
       {
        "name" : "x",
        "deco" : "i"
       },
       {
        "name" : "y",
        "deco" : "i"
       },
       {
        "name" : "color",
        "deco" : "S3d2d4sdl25ColorQg"
       }
      ],
      "endline" : 209,
      "endchar" : 5
     },
     {
      "name" : "draw",
      "kind" : "function",
      "comment" : " Draws a point on the surface with the given color\n",
      "line" : 214,
      "char" : 10,
      "deco" : "FC3d2d4math6Vector__TQkTiVki2ZQtSQBf4sdl25ColorQgZv",
      "originalType" : "void(iVector point, Color color)",
      "parameters" : [
       {
        "name" : "point",
        "deco" : "C3d2d4math6Vector__TQkTiVki2ZQt"
       },
       {
        "name" : "color",
        "deco" : "S3d2d4sdl25ColorQg"
       }
      ],
      "endline" : 216,
      "endchar" : 5
     },
     {
      "name" : "draw",
      "kind" : "function",
      "comment" : " Draws a line on the surface with the given color\n",
      "line" : 221,
      "char" : 10,
      "deco" : "FC3d2d4math6Vector__TQkTiVki2ZQtQBfSQBi4sdl25ColorQgZv",
      "originalType" : "void(iVector first, iVector second, Color color)",
      "parameters" : [
       {
        "name" : "first",
        "deco" : "C3d2d4math6Vector__TQkTiVki2ZQt"
       },
       {
        "name" : "second",
        "deco" : "C3d2d4math6Vector__TQkTiVki2ZQt"
       },
       {
        "name" : "color",
        "deco" : "S3d2d4sdl25ColorQg"
       }
      ],
      "endline" : 236,
      "endchar" : 5
     },
     {
      "name" : "draw",
      "kind" : "function",
      "comment" : " Draws a line on the surface with the given color\n",
      "line" : 241,
      "char" : 10,
      "deco" : "FC3d2d4math7Segment__TQlTiVki2ZQuSQBg4sdl25ColorQgZv",
      "originalType" : "void(iSegment line, Color color)",
      "parameters" : [
       {
        "name" : "line",
        "deco" : "C3d2d4math7Segment__TQlTiVki2ZQu"
       },
       {
        "name" : "color",
        "deco" : "S3d2d4sdl25ColorQg"
       }
      ],
      "endline" : 243,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "comment" : " Draws a polygon on the surface with the given color\n",
      "line" : 248,
      "char" : 10,
      "name" : "draw",
      "parameters" : [
       {
        "name" : "sides",
        "kind" : "value",
        "deco" : "k"
       }
      ],
      "members" : [
       {
        "name" : "draw",
        "kind" : "function",
        "line" : 248,
        "char" : 10,
        "type" : "void(iPolygon!sides toDraw, Color color)",
        "parameters" : [
         {
          "name" : "toDraw",
          "type" : "iPolygon!sides"
         },
         {
          "name" : "color",
          "type" : "Color"
         }
        ],
        "endline" : 252,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "draw",
      "kind" : "function",
      "comment" : " Draws a rectangle on the surface\n",
      "line" : 257,
      "char" : 10,
      "deco" : "FC3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBlSQBy4sdl25ColorQgZv",
      "originalType" : "void(iRectangle rect, Color color)",
      "parameters" : [
       {
        "name" : "rect",
        "deco" : "C3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBl"
       },
       {
        "name" : "color",
        "deco" : "S3d2d4sdl25ColorQg"
       }
      ],
      "endline" : 259,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "comment" : " Draws the given bezier curve with numPoints number of points on the curve\n More points is smoother but slower\n",
      "line" : 265,
      "char" : 10,
      "name" : "draw",
      "parameters" : [
       {
        "name" : "numPoints",
        "kind" : "value",
        "deco" : "k",
        "defaultValue" : "100"
       }
      ],
      "members" : [
       {
        "name" : "draw",
        "kind" : "function",
        "line" : 265,
        "char" : 10,
        "type" : "void(BezierCurve!(int, 2) curve, Color color)",
        "parameters" : [
         {
          "name" : "curve",
          "type" : "BezierCurve!(int, 2)"
         },
         {
          "name" : "color",
          "type" : "Color"
         }
        ],
        "endline" : 270,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "comment" : " Draws the ellipse bounded by the given box between the given angles in radians\n More points generally means a slower but more well drawn ellipse\n",
      "line" : 276,
      "char" : 10,
      "name" : "draw",
      "parameters" : [
       {
        "name" : "numPoints",
        "kind" : "value",
        "deco" : "k",
        "defaultValue" : "100"
       }
      ],
      "members" : [
       {
        "name" : "draw",
        "kind" : "function",
        "line" : 276,
        "char" : 10,
        "type" : "void(iRectangle bounds, double startAngle, double endAngle)",
        "parameters" : [
         {
          "name" : "bounds",
          "type" : "iRectangle"
         },
         {
          "name" : "startAngle",
          "deco" : "d"
         },
         {
          "name" : "endAngle",
          "deco" : "d"
         }
        ],
        "endline" : 290,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "comment" : " Draws the ellipse bounded by the given box between the given angles in radians with the given color\n More points generally means a slower but more well drawn ellipse\n",
      "line" : 296,
      "char" : 10,
      "name" : "draw",
      "parameters" : [
       {
        "name" : "numPoints",
        "kind" : "value",
        "deco" : "k",
        "defaultValue" : "100"
       }
      ],
      "members" : [
       {
        "name" : "draw",
        "kind" : "function",
        "line" : 296,
        "char" : 10,
        "type" : "void(iRectangle bounds, double startAngle, double endAngle, Color color)",
        "parameters" : [
         {
          "name" : "bounds",
          "type" : "iRectangle"
         },
         {
          "name" : "startAngle",
          "deco" : "d"
         },
         {
          "name" : "endAngle",
          "deco" : "d"
         },
         {
          "name" : "color",
          "type" : "Color"
         }
        ],
        "endline" : 301,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "comment" : " Fills the ellipse bounded by the given box between the given angles in radians\n Fills the ellipse between the arc endpoints: fills ellipse as arc rather than filling as ellipse (not a pizza slice)\n More points generally means a slower but more well drawn ellipse\n",
      "line" : 308,
      "char" : 10,
      "name" : "fill",
      "parameters" : [
       {
        "name" : "numPoints",
        "kind" : "value",
        "deco" : "k",
        "defaultValue" : "100"
       }
      ],
      "members" : [
       {
        "name" : "fill",
        "kind" : "function",
        "line" : 308,
        "char" : 10,
        "type" : "void(iRectangle bounds, double startAngle, double endAngle)",
        "parameters" : [
         {
          "name" : "bounds",
          "type" : "iRectangle"
         },
         {
          "name" : "startAngle",
          "deco" : "d"
         },
         {
          "name" : "endAngle",
          "deco" : "d"
         }
        ],
        "endline" : 318,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "comment" : " Fills the ellipse bounded by the given box between the given angles in radians with the given color\n Fills the ellipse between the arc endpoints: fills ellipse as arc rather than filling as ellipse (not a pizza slice)\n More points generally means a slower but more well drawn ellipse\n",
      "line" : 325,
      "char" : 10,
      "name" : "fill",
      "parameters" : [
       {
        "name" : "numPoints",
        "kind" : "value",
        "deco" : "k",
        "defaultValue" : "100"
       }
      ],
      "members" : [
       {
        "name" : "fill",
        "kind" : "function",
        "line" : 325,
        "char" : 10,
        "type" : "void(iRectangle bounds, double startAngle, double endAngle, Color color)",
        "parameters" : [
         {
          "name" : "bounds",
          "type" : "iRectangle"
         },
         {
          "name" : "startAngle",
          "deco" : "d"
         },
         {
          "name" : "endAngle",
          "deco" : "d"
         },
         {
          "name" : "color",
          "type" : "Color"
         }
        ],
        "endline" : 330,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "comment" : " Fills a polygon on the surface with the given color\n",
      "line" : 335,
      "char" : 10,
      "name" : "fill",
      "parameters" : [
       {
        "name" : "sides",
        "kind" : "value",
        "deco" : "k"
       }
      ],
      "members" : [
       {
        "name" : "fill",
        "kind" : "function",
        "line" : 335,
        "char" : 10,
        "type" : "void(iPolygon!sides toDraw, Color color)",
        "parameters" : [
         {
          "name" : "toDraw",
          "type" : "iPolygon!sides"
         },
         {
          "name" : "color",
          "type" : "Color"
         }
        ],
        "endline" : 367,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "__xdtor",
      "kind" : "alias"
     }
    ]
   },
   {
    "name" : "loadImage",
    "kind" : "function",
    "comment" : " Uses the SDL_Image library to create a non-bmp image surface\n",
    "line" : 374,
    "char" : 9,
    "deco" : "FAyaZC3d2d4sdl27SurfaceQi",
    "parameters" : [
     {
      "name" : "imagePath",
      "deco" : "Aya"
     }
    ],
    "endline" : 378,
    "endchar" : 1
   },
   {
    "name" : "scaled",
    "kind" : "function",
    "comment" : " Returns a surface that fits the given rectangle\n Fits the original surface within the returned surface to be as large as it can while maintaining aspect ratio\n Also centers the original surface within the returned surface\n",
    "line" : 385,
    "char" : 9,
    "deco" : "FC3d2d4sdl27SurfaceQiiiZQx",
    "parameters" : [
     {
      "name" : "original",
      "deco" : "C3d2d4sdl27SurfaceQi"
     },
     {
      "name" : "desiredW",
      "deco" : "i"
     },
     {
      "name" : "desiredH",
      "deco" : "i"
     }
    ],
    "endline" : 394,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "d2d.sdl2.Texture",
  "kind" : "module",
  "file" : "source/d2d/sdl2/Texture.d",
  "comment" : " Texture\n",
  "members" : [
   {
    "name" : "d2d.sdl2",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "Texture",
    "kind" : "class",
    "comment" : " Textures are a rectangular collection of pixels\n Textures are fast and can be drawn using a renderer\n Textures can be created from a more easily edited surface\n Textures are handled in hardware as opposed to surfaces which are handled in software\n When used repeatedly and stored, textures should be preferred, but surfaces should be used when flexibility is desired\n",
    "line" : 15,
    "char" : 1,
    "members" : [
     {
      "name" : "texture",
      "kind" : "variable",
      "protection" : "private",
      "line" : 17,
      "char" : 26,
      "deco" : "PS8derelict4sdl28internal9sdl_types11SDL_Texture",
      "offset" : 16
     },
     {
      "name" : "handle",
      "kind" : "function",
      "comment" : " Returns the raw SDL data of this object\n",
      "line" : 22,
      "char" : 28,
      "deco" : "FNdZPS8derelict4sdl28internal9sdl_types11SDL_Texture",
      "endline" : 24,
      "endchar" : 5
     },
     {
      "name" : "dimensions",
      "kind" : "function",
      "comment" : " Gets the texture's dimensions as a point with the width being the x coordinate and the height being the y coordinate\n",
      "line" : 29,
      "char" : 23,
      "deco" : "FNdZC3d2d4math6Vector__TQkTiVki2ZQt",
      "originalType" : "@property iVector()",
      "endline" : 33,
      "endchar" : 5
     },
     {
      "name" : "format",
      "kind" : "function",
      "comment" : " Gets the texture's pixel format\n The pixel format is the format in which information about the pixels is stored (e.g. RGBA)\n",
      "line" : 39,
      "char" : 20,
      "deco" : "FNdZk",
      "endline" : 43,
      "endchar" : 5
     },
     {
      "name" : "access",
      "kind" : "function",
      "comment" : " Gets the texture's access value\n Acces value determines how the texture can be accessed or modified\n Potential values are:\n SDL_TEXTUREACCESS_STATIC: texture changes rarely, and is not lockable\n SDL_TEXTUREACCESS_STREAMING: texture changes frequently, and is lockable\n SDL_TEXTUREACCESS_TARGET: texturecan be used as a render target\n",
      "line" : 53,
      "char" : 19,
      "deco" : "FNdZi",
      "endline" : 57,
      "endchar" : 5
     },
     {
      "name" : "alphaMod",
      "kind" : "function",
      "comment" : "\n Sets the texture's alpha value, or transparency, if possible\n Alpha varies from 0 to 255\n",
      "line" : 63,
      "char" : 20,
      "deco" : "FNdhZv",
      "parameters" : [
       {
        "name" : "alphaMultiplier",
        "deco" : "h"
       }
      ],
      "endline" : 65,
      "endchar" : 5
     },
     {
      "name" : "alphaMod",
      "kind" : "function",
      "comment" : " Gets the texture's alpha value, or transparency, if possible\n Alpha varies from 0 to 255\n",
      "line" : 71,
      "char" : 21,
      "deco" : "FNdZh",
      "endline" : 75,
      "endchar" : 5
     },
     {
      "name" : "blendMode",
      "kind" : "function",
      "comment" : " Sets the texture's blend mode\n Modes include:\n SDL_BLENDMODE_NONE: no blending\n SDL_BLENDMODE_BLEND: alpha blending\n SDL_BLENDMODE_ADD: additive blending\n SDL_BLENDMODE_MOD: color modulate\n",
      "line" : 85,
      "char" : 20,
      "deco" : "FNdE8derelict4sdl28internal9sdl_types13SDL_BlendModeZv",
      "parameters" : [
       {
        "name" : "blend",
        "deco" : "E8derelict4sdl28internal9sdl_types13SDL_BlendMode"
       }
      ],
      "endline" : 87,
      "endchar" : 5
     },
     {
      "name" : "blendMode",
      "kind" : "function",
      "comment" : " Gets the texture's blend mode\n Modes include:\n SDL_BLENDMODE_NONE: no blending\n SDL_BLENDMODE_BLEND: alpha blending\n SDL_BLENDMODE_ADD: additive blending\n SDL_BLENDMODE_MOD: color modulate\n",
      "line" : 97,
      "char" : 30,
      "deco" : "FNdZPE8derelict4sdl28internal9sdl_types13SDL_BlendMode",
      "endline" : 101,
      "endchar" : 5
     },
     {
      "name" : "colorMod",
      "kind" : "function",
      "comment" : " Sets the color modifier for the surface\n Color modification works by multiplying the colorMultiplier / 255 into the surface pixels\n",
      "line" : 107,
      "char" : 20,
      "deco" : "FNdS3d2d4sdl25ColorQgZv",
      "parameters" : [
       {
        "name" : "colorMultiplier",
        "deco" : "S3d2d4sdl25ColorQg"
       }
      ],
      "endline" : 110,
      "endchar" : 5
     },
     {
      "name" : "colorMod",
      "kind" : "function",
      "comment" : " Gets the color modifier for the surface\n Color modification works by multiplying the colorMultiplier / 255 into the surface pixels\n",
      "line" : 116,
      "char" : 21,
      "deco" : "FNdZS3d2d4sdl25ColorQg",
      "endline" : 121,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : " Creates a texture given explicit parameters that are required by SDL CreateTexture\n Allows for more control over how the texture works\n",
      "line" : 127,
      "char" : 5,
      "deco" : "FC3d2d4sdl28RendererQjkE8derelictQBb8internal9sdl_types17SDL_TextureAccessiiZCQCyQCx7TextureQi",
      "originalType" : "(Renderer renderer, uint format, SDL_TextureAccess access, int width, int height)",
      "parameters" : [
       {
        "name" : "renderer",
        "deco" : "C3d2d4sdl28RendererQj"
       },
       {
        "name" : "format",
        "deco" : "k"
       },
       {
        "name" : "access",
        "deco" : "E8derelict4sdl28internal9sdl_types17SDL_TextureAccess"
       },
       {
        "name" : "width",
        "deco" : "i"
       },
       {
        "name" : "height",
        "deco" : "i"
       }
      ],
      "endline" : 130,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : " Constructs a new texture from a surface\n",
      "line" : 135,
      "char" : 5,
      "deco" : "FC3d2d4sdl27SurfaceQiCQuQs8RendererQjZCQBlQBk7TextureQi",
      "originalType" : "(Surface surface, Renderer renderer)",
      "parameters" : [
       {
        "name" : "surface",
        "deco" : "C3d2d4sdl27SurfaceQi"
       },
       {
        "name" : "renderer",
        "deco" : "C3d2d4sdl28RendererQj"
       }
      ],
      "endline" : 137,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : " Creates a texture from an already existing SDL_Texture\n",
      "line" : 142,
      "char" : 5,
      "deco" : "FPS8derelict4sdl28internal9sdl_types11SDL_TextureZC3d2dQBr7TextureQi",
      "originalType" : "(SDL_Texture* alreadyExisting)",
      "parameters" : [
       {
        "name" : "alreadyExisting",
        "deco" : "PS8derelict4sdl28internal9sdl_types11SDL_Texture"
       }
      ],
      "endline" : 144,
      "endchar" : 5
     },
     {
      "name" : "~this",
      "kind" : "destructor",
      "comment" : " Ensures that SDL can properly dispose of the texture\n",
      "line" : 149,
      "char" : 5,
      "deco" : "FZv",
      "endline" : 151,
      "endchar" : 5
     },
     {
      "name" : "lock",
      "kind" : "function",
      "comment" : " Locks a texture from editing\n",
      "line" : 156,
      "char" : 10,
      "deco" : "FPPvPiC3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBlZv",
      "originalType" : "void(void** pixels, int* pitch, iRectangle location = null)",
      "parameters" : [
       {
        "name" : "pixels",
        "deco" : "PPv"
       },
       {
        "name" : "pitch",
        "deco" : "Pi"
       },
       {
        "name" : "location",
        "deco" : "C3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBl",
        "default" : "null"
       }
      ],
      "endline" : 159,
      "endchar" : 5
     },
     {
      "name" : "unlock",
      "kind" : "function",
      "comment" : " Unlocks a texture to edit\n",
      "line" : 164,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 166,
      "endchar" : 5
     },
     {
      "name" : "update",
      "kind" : "function",
      "comment" : " Updates a texture with new pixel data\n",
      "line" : 171,
      "char" : 10,
      "deco" : "FPviC3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBlZv",
      "originalType" : "void(void* pixels, int pitch, iRectangle location = null)",
      "parameters" : [
       {
        "name" : "pixels",
        "deco" : "Pv"
       },
       {
        "name" : "pitch",
        "deco" : "i"
       },
       {
        "name" : "location",
        "deco" : "C3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBl",
        "default" : "null"
       }
      ],
      "endline" : 174,
      "endchar" : 5
     },
     {
      "name" : "__xdtor",
      "kind" : "alias"
     }
    ]
   }
  ]
 },
 {
  "name" : "d2d.sdl2.Window",
  "kind" : "module",
  "file" : "source/d2d/sdl2/Window.d",
  "comment" : " Window\n",
  "members" : [
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 7,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 8,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.string",
    "kind" : "import",
    "line" : 9,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "d2d.sdl2",
    "kind" : "import",
    "line" : 10,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "Window",
    "kind" : "class",
    "comment" : " A window is, as it name suggests, a window\n This window class is extremely minimalistic and is a port of the SDL_Window\n",
    "line" : 16,
    "char" : 1,
    "members" : [
     {
      "name" : "window",
      "kind" : "variable",
      "protection" : "private",
      "line" : 18,
      "char" : 25,
      "deco" : "PS8derelict4sdl28internal9sdl_types10SDL_Window",
      "offset" : 16
     },
     {
      "name" : "handle",
      "kind" : "function",
      "comment" : " Returns the raw SDL data of this object\n",
      "line" : 23,
      "char" : 27,
      "deco" : "FNdZPS8derelict4sdl28internal9sdl_types10SDL_Window",
      "endline" : 25,
      "endchar" : 5
     },
     {
      "name" : "brightness",
      "kind" : "function",
      "comment" : " Sets the window's brightness or gama multiplier\n",
      "line" : 30,
      "char" : 20,
      "deco" : "FNdfZv",
      "parameters" : [
       {
        "name" : "b",
        "deco" : "f"
       }
      ],
      "endline" : 32,
      "endchar" : 5
     },
     {
      "name" : "brightness",
      "kind" : "function",
      "comment" : " Gets the window's brightness or gama multiplier\n",
      "line" : 37,
      "char" : 21,
      "deco" : "FNdZf",
      "endline" : 39,
      "endchar" : 5
     },
     {
      "name" : "displayMode",
      "kind" : "function",
      "comment" : " Sets the display mode of this window\n",
      "line" : 44,
      "char" : 20,
      "deco" : "FNdS8derelict4sdl28internal9sdl_types15SDL_DisplayModeZv",
      "parameters" : [
       {
        "name" : "dMode",
        "deco" : "S8derelict4sdl28internal9sdl_types15SDL_DisplayMode"
       }
      ],
      "endline" : 46,
      "endchar" : 5
     },
     {
      "name" : "displayMode",
      "kind" : "function",
      "comment" : " Gets the display mode of this window\n",
      "line" : 51,
      "char" : 31,
      "deco" : "FNdZS8derelict4sdl28internal9sdl_types15SDL_DisplayMode",
      "endline" : 55,
      "endchar" : 5
     },
     {
      "name" : "grab",
      "kind" : "function",
      "comment" : " Sets whether the window grabs input or not\n",
      "line" : 60,
      "char" : 20,
      "deco" : "FNdbZv",
      "parameters" : [
       {
        "name" : "g",
        "deco" : "b"
       }
      ],
      "endline" : 62,
      "endchar" : 5
     },
     {
      "name" : "grab",
      "kind" : "function",
      "comment" : " Gets whether the window grabs input or not\n",
      "line" : 67,
      "char" : 20,
      "deco" : "FNdZb",
      "endline" : 69,
      "endchar" : 5
     },
     {
      "name" : "maximumSize",
      "kind" : "function",
      "comment" : " Sets the window's maximum size\n",
      "line" : 74,
      "char" : 20,
      "deco" : "FNdC3d2d4math6Vector__TQkTiVki2ZQtZv",
      "originalType" : "@property void(iVector maxSize)",
      "parameters" : [
       {
        "name" : "maxSize",
        "deco" : "C3d2d4math6Vector__TQkTiVki2ZQt"
       }
      ],
      "endline" : 76,
      "endchar" : 5
     },
     {
      "name" : "maximumSize",
      "kind" : "function",
      "comment" : " Gets the window's maximum size\n",
      "line" : 81,
      "char" : 23,
      "deco" : "FNdZC3d2d4math6Vector__TQkTiVki2ZQt",
      "originalType" : "@property iVector()",
      "endline" : 85,
      "endchar" : 5
     },
     {
      "name" : "minimumSize",
      "kind" : "function",
      "comment" : " Sets the window's minimum size\n",
      "line" : 90,
      "char" : 20,
      "deco" : "FNdC3d2d4math6Vector__TQkTiVki2ZQtZv",
      "originalType" : "@property void(iVector minSize)",
      "parameters" : [
       {
        "name" : "minSize",
        "deco" : "C3d2d4math6Vector__TQkTiVki2ZQt"
       }
      ],
      "endline" : 92,
      "endchar" : 5
     },
     {
      "name" : "minimumSize",
      "kind" : "function",
      "comment" : " Gets the window's minimum size\n",
      "line" : 97,
      "char" : 23,
      "deco" : "FNdZC3d2d4math6Vector__TQkTiVki2ZQt",
      "originalType" : "@property iVector()",
      "endline" : 101,
      "endchar" : 5
     },
     {
      "name" : "size",
      "kind" : "function",
      "comment" : " Sets the window's size\n",
      "line" : 106,
      "char" : 20,
      "deco" : "FNdC3d2d4math6Vector__TQkTiVki2ZQtZv",
      "originalType" : "@property void(iVector s)",
      "parameters" : [
       {
        "name" : "s",
        "deco" : "C3d2d4math6Vector__TQkTiVki2ZQt"
       }
      ],
      "endline" : 108,
      "endchar" : 5
     },
     {
      "name" : "size",
      "kind" : "function",
      "comment" : " Gets the window's size\n",
      "line" : 113,
      "char" : 23,
      "deco" : "FNdZC3d2d4math6Vector__TQkTiVki2ZQt",
      "originalType" : "@property iVector()",
      "endline" : 117,
      "endchar" : 5
     },
     {
      "name" : "opacity",
      "kind" : "function",
      "comment" : " Sets the window's opacity\n",
      "line" : 122,
      "char" : 20,
      "deco" : "FNdfZv",
      "parameters" : [
       {
        "name" : "o",
        "deco" : "f"
       }
      ],
      "endline" : 124,
      "endchar" : 5
     },
     {
      "name" : "opacity",
      "kind" : "function",
      "comment" : " Gets the window's opacity\n",
      "line" : 129,
      "char" : 21,
      "deco" : "FNdZf",
      "endline" : 133,
      "endchar" : 5
     },
     {
      "name" : "position",
      "kind" : "function",
      "comment" : " Sets the window's screen position\n",
      "line" : 138,
      "char" : 15,
      "deco" : "FNdC3d2d4math6Vector__TQkTiVki2ZQtZv",
      "originalType" : "@property (iVector pos)",
      "parameters" : [
       {
        "name" : "pos",
        "deco" : "C3d2d4math6Vector__TQkTiVki2ZQt"
       }
      ],
      "endline" : 140,
      "endchar" : 5
     },
     {
      "name" : "position",
      "kind" : "function",
      "comment" : " Gets the window's screen position\n",
      "line" : 145,
      "char" : 23,
      "deco" : "FNdZC3d2d4math6Vector__TQkTiVki2ZQt",
      "originalType" : "@property iVector()",
      "endline" : 149,
      "endchar" : 5
     },
     {
      "name" : "title",
      "kind" : "function",
      "comment" : " Sets the window's title\n",
      "line" : 154,
      "char" : 20,
      "deco" : "FNdAyaZv",
      "parameters" : [
       {
        "name" : "newTitle",
        "deco" : "Aya"
       }
      ],
      "endline" : 156,
      "endchar" : 5
     },
     {
      "name" : "title",
      "kind" : "function",
      "comment" : " Gets the window's title\n",
      "line" : 161,
      "char" : 22,
      "deco" : "FNdZAya",
      "endline" : 163,
      "endchar" : 5
     },
     {
      "name" : "icon",
      "kind" : "function",
      "comment" : " Sets the window's icon\n",
      "line" : 168,
      "char" : 20,
      "deco" : "FNdC3d2d4sdl27SurfaceQiZv",
      "parameters" : [
       {
        "name" : "i",
        "deco" : "C3d2d4sdl27SurfaceQi"
       }
      ],
      "endline" : 170,
      "endchar" : 5
     },
     {
      "name" : "info",
      "kind" : "function",
      "comment" : " Gets the information about the window\n Returns an array of all the flags that describe this window\n",
      "line" : 176,
      "char" : 33,
      "deco" : "FNdZAE8derelict4sdl28internal9sdl_types15SDL_WindowFlags",
      "endline" : 189,
      "endchar" : 5
     },
     {
      "name" : "renderer",
      "kind" : "function",
      "comment" : "\n Gets the window's renderer\n This function shouldn't be used because this function returns a renderer object\n Once the returned object gets garbage collected, it deletes all instances of this window's renderer\n",
      "line" : 196,
      "char" : 24,
      "deco" : "FNdZC3d2d4sdl28RendererQj",
      "endline" : 198,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : " Constructor for a window; needs at least a width and a height\n",
      "line" : 203,
      "char" : 5,
      "deco" : "FiiE8derelict4sdl28internal9sdl_types15SDL_WindowFlagsAyaiiZC3d2dQCa6WindowQh",
      "originalType" : "(int w, int h, SDL_WindowFlags flags = SDL_WINDOW_SHOWN, string title = \"\", int x = SDL_WINDOWPOS_CENTERED, int y = SDL_WINDOWPOS_CENTERED)",
      "parameters" : [
       {
        "name" : "w",
        "deco" : "i"
       },
       {
        "name" : "h",
        "deco" : "i"
       },
       {
        "name" : "flags",
        "deco" : "E8derelict4sdl28internal9sdl_types15SDL_WindowFlags",
        "default" : "cast(SDL_WindowFlags)4"
       },
       {
        "name" : "title",
        "deco" : "Aya",
        "default" : "\"\""
       },
       {
        "name" : "x",
        "deco" : "i",
        "default" : "805240832"
       },
       {
        "name" : "y",
        "deco" : "i",
        "default" : "805240832"
       }
      ],
      "endline" : 207,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : " Creates the window from an already existing SDL_Window\n",
      "line" : 212,
      "char" : 5,
      "deco" : "FPS8derelict4sdl28internal9sdl_types10SDL_WindowZC3d2dQBq6WindowQh",
      "originalType" : "(SDL_Window* alreadyExisting)",
      "parameters" : [
       {
        "name" : "alreadyExisting",
        "deco" : "PS8derelict4sdl28internal9sdl_types10SDL_Window"
       }
      ],
      "endline" : 214,
      "endchar" : 5
     },
     {
      "name" : "~this",
      "kind" : "destructor",
      "comment" : " Ensures that SDL can properly dispose of the window\n",
      "line" : 219,
      "char" : 5,
      "deco" : "FZv",
      "endline" : 221,
      "endchar" : 5
     },
     {
      "name" : "setAsModalFor",
      "kind" : "function",
      "comment" : " Marks the current window as a modal for the given parent window\n",
      "line" : 226,
      "char" : 10,
      "deco" : "FC3d2d4sdl26WindowQhZv",
      "parameters" : [
       {
        "name" : "parent",
        "deco" : "C3d2d4sdl26WindowQh"
       }
      ],
      "endline" : 228,
      "endchar" : 5
     },
     {
      "name" : "setBordered",
      "kind" : "function",
      "comment" : " Sets whether the window should be bordered or not\n Is not a property method because it is a setter without a getter\n",
      "line" : 234,
      "char" : 10,
      "deco" : "FbZv",
      "parameters" : [
       {
        "name" : "borderedStatus",
        "deco" : "b"
       }
      ],
      "endline" : 236,
      "endchar" : 5
     },
     {
      "name" : "setResizable",
      "kind" : "function",
      "comment" : " Sets whether the window should be resizable or not\n Is not a property method because it is a setter without a getter\n",
      "line" : 242,
      "char" : 10,
      "deco" : "FbZv",
      "parameters" : [
       {
        "name" : "resizability",
        "deco" : "b"
       }
      ],
      "endline" : 244,
      "endchar" : 5
     },
     {
      "name" : "hide",
      "kind" : "function",
      "comment" : " Hides the window\n",
      "line" : 249,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 251,
      "endchar" : 5
     },
     {
      "name" : "show",
      "kind" : "function",
      "comment" : " Shows the window\n",
      "line" : 256,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 258,
      "endchar" : 5
     },
     {
      "name" : "maximize",
      "kind" : "function",
      "comment" : " Maximizes the window\n",
      "line" : 263,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 265,
      "endchar" : 5
     },
     {
      "name" : "minimize",
      "kind" : "function",
      "comment" : " Minimizes window in terms of size\n",
      "line" : 270,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 272,
      "endchar" : 5
     },
     {
      "name" : "restore",
      "kind" : "function",
      "comment" : " Restores a window to its original state before a maximize or minimize\n",
      "line" : 277,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 279,
      "endchar" : 5
     },
     {
      "name" : "raise",
      "kind" : "function",
      "comment" : " Moves the window to be on top of everything else and to have the focus\n",
      "line" : 284,
      "char" : 10,
      "deco" : "FZv",
      "endline" : 286,
      "endchar" : 5
     },
     {
      "name" : "__xdtor",
      "kind" : "alias"
     }
    ]
   }
  ]
 },
 {
  "name" : "d2d.sdl2",
  "kind" : "module",
  "file" : "source/d2d/sdl2/package.d",
  "comment" : " LibSDL2\n",
  "members" : [
   {
    "name" : "derelict.sdl2.sdl",
    "kind" : "import",
    "line" : 6,
    "char" : 15
   },
   {
    "name" : "derelict.sdl2.image",
    "kind" : "import",
    "line" : 7,
    "char" : 15
   },
   {
    "name" : "derelict.sdl2.mixer",
    "kind" : "import",
    "line" : 8,
    "char" : 15
   },
   {
    "name" : "derelict.sdl2.ttf",
    "kind" : "import",
    "line" : 9,
    "char" : 15
   },
   {
    "name" : "derelict.sdl2.net",
    "kind" : "import",
    "line" : 10,
    "char" : 15
   },
   {
    "name" : "d2d.math",
    "kind" : "import",
    "line" : 11,
    "char" : 15
   },
   {
    "name" : "d2d.sdl2.Color",
    "kind" : "import",
    "line" : 12,
    "char" : 15
   },
   {
    "name" : "d2d.sdl2.EventHandler",
    "kind" : "import",
    "line" : 13,
    "char" : 15
   },
   {
    "name" : "d2d.sdl2.Font",
    "kind" : "import",
    "line" : 14,
    "char" : 15
   },
   {
    "name" : "d2d.sdl2.InputSource",
    "kind" : "import",
    "line" : 15,
    "char" : 15
   },
   {
    "name" : "d2d.sdl2.Keyboard",
    "kind" : "import",
    "line" : 16,
    "char" : 15
   },
   {
    "name" : "d2d.sdl2.Mouse",
    "kind" : "import",
    "line" : 17,
    "char" : 15
   },
   {
    "name" : "d2d.sdl2.Polygon",
    "kind" : "import",
    "line" : 18,
    "char" : 15
   },
   {
    "name" : "d2d.sdl2.Renderer",
    "kind" : "import",
    "line" : 19,
    "char" : 15
   },
   {
    "name" : "d2d.sdl2.Sound",
    "kind" : "import",
    "line" : 20,
    "char" : 15
   },
   {
    "name" : "d2d.sdl2.Surface",
    "kind" : "import",
    "line" : 21,
    "char" : 15
   },
   {
    "name" : "d2d.sdl2.Texture",
    "kind" : "import",
    "line" : 22,
    "char" : 15
   },
   {
    "name" : "d2d.sdl2.Window",
    "kind" : "import",
    "line" : 23,
    "char" : 15
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 25,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "loadLibSDL",
    "kind" : "function",
    "comment" : " Loads base DerelictSDL2\n Function can be called many times, but load only happens once\n",
    "line" : 31,
    "char" : 6,
    "deco" : "FS8derelict4util6loader16SharedLibVersionZv",
    "parameters" : [
     {
      "name" : "ver",
      "deco" : "S8derelict4util6loader16SharedLibVersion",
      "default" : "SharedLibVersion(2, 0, 2)"
     }
    ],
    "endline" : 38,
    "endchar" : 1
   },
   {
    "name" : "loadLibImage",
    "kind" : "function",
    "comment" : " Loads SDL_Image libraries\n Function can be called many times, but load only happens once\n",
    "line" : 44,
    "char" : 6,
    "deco" : "FZv",
    "endline" : 51,
    "endchar" : 1
   },
   {
    "name" : "loadLibMixer",
    "kind" : "function",
    "comment" : " Loads SDL_Mixer libraries\n Function can be called many times, but load only happens once\n",
    "line" : 57,
    "char" : 6,
    "deco" : "FZv",
    "endline" : 65,
    "endchar" : 1
   },
   {
    "name" : "loadLibTTF",
    "kind" : "function",
    "comment" : " Loads SDL_ttf libraries\n Function can be called many times, but load only happens once\n",
    "line" : 71,
    "char" : 6,
    "deco" : "FZv",
    "endline" : 78,
    "endchar" : 1
   },
   {
    "name" : "ensureSafe",
    "kind" : "function",
    "comment" : " Takes in an integer output from an SDL function and then throws an error if the integer isn't 0\n Because SDL doesn't throw errors, but rather returns codes, 0 means a successful finish to a function\n Any non-zero output from a function means that SDL encountered an error, and this function will throw upon an SDL error\n",
    "line" : 85,
    "char" : 6,
    "deco" : "FiZv",
    "parameters" : [
     {
      "name" : "output",
      "deco" : "i"
     }
    ],
    "endline" : 91,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "comment" : " Takes in an object from an SDL function and then throws an error if the object is null\n Because SDL doesn't throw errors upon failed object creation, but constructs the object as a null, a non-null object means a successful creation\n Any null creation means that SDL encountered an error, and this function will throw an SDL error accordingly\n",
    "line" : 98,
    "char" : 3,
    "name" : "ensureSafe",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "ensureSafe",
      "kind" : "function",
      "line" : 98,
      "char" : 3,
      "type" : "T(T output)",
      "parameters" : [
       {
        "name" : "output",
        "type" : "T"
       }
      ],
      "endline" : 101,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "tempPoint",
    "kind" : "variable",
    "protection" : "private",
    "line" : 104,
    "char" : 19,
    "deco" : "S8derelict4sdl28internal9sdl_types9SDL_Point"
   },
   {
    "name" : "tempRect",
    "kind" : "variable",
    "protection" : "private",
    "line" : 105,
    "char" : 18,
    "deco" : "S8derelict4sdl28internal9sdl_types8SDL_Rect"
   },
   {
    "name" : "handle",
    "kind" : "function",
    "comment" : " Gets a 2d vector as an SDL_Point*\n",
    "line" : 110,
    "char" : 12,
    "deco" : "FC3d2d4math6Vector__TQkTiVki2ZQtZPS8derelict4sdl28internal9sdl_types9SDL_Point",
    "originalType" : "SDL_Point*(iVector vec)",
    "parameters" : [
     {
      "name" : "vec",
      "deco" : "C3d2d4math6Vector__TQkTiVki2ZQt"
     }
    ],
    "endline" : 113,
    "endchar" : 1
   },
   {
    "name" : "handle",
    "kind" : "function",
    "comment" : " Gets a 2d axis aligned bounding box as an SDL_Rect*\n",
    "line" : 118,
    "char" : 11,
    "deco" : "FC3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBlZPS8derelict4sdl28internal9sdl_types8SDL_Rect",
    "originalType" : "SDL_Rect*(iRectangle rec)",
    "parameters" : [
     {
      "name" : "rec",
      "deco" : "C3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBl"
     }
    ],
    "endline" : 121,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "comment" : " Gets a 2d axis aligned bounding box as a polygon\n",
    "line" : 126,
    "char" : 16,
    "name" : "toPolygon",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "toPolygon",
      "kind" : "function",
      "line" : 126,
      "char" : 16,
      "type" : "Polygon!(T, 4)(AxisAlignedBoundingBox!(T, 2) rec)",
      "parameters" : [
       {
        "name" : "rec",
        "type" : "AxisAlignedBoundingBox!(T, 2)"
       }
      ],
      "endline" : 128,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "iVector",
    "kind" : "alias",
    "line" : 131,
    "char" : 1,
    "deco" : "C3d2d4math6Vector__TQkTiVki2ZQt"
   },
   {
    "name" : "dVector",
    "kind" : "alias",
    "line" : 132,
    "char" : 1,
    "deco" : "C3d2d4math6Vector__TQkTdVki2ZQt"
   },
   {
    "name" : "fVector",
    "kind" : "alias",
    "line" : 133,
    "char" : 1,
    "deco" : "C3d2d4math6Vector__TQkTfVki2ZQt"
   },
   {
    "name" : "iRectangle",
    "kind" : "alias",
    "line" : 136,
    "char" : 1,
    "deco" : "C3d2d4math22AxisAlignedBoundingBox__TQBbTiVki2ZQBl"
   },
   {
    "name" : "dRectangle",
    "kind" : "alias",
    "line" : 137,
    "char" : 1,
    "deco" : "C3d2d4math22AxisAlignedBoundingBox__TQBbTdVki2ZQBl"
   },
   {
    "name" : "fRectangle",
    "kind" : "alias",
    "line" : 138,
    "char" : 1,
    "deco" : "C3d2d4math22AxisAlignedBoundingBox__TQBbTfVki2ZQBl"
   },
   {
    "name" : "iSegment",
    "kind" : "alias",
    "line" : 141,
    "char" : 1,
    "deco" : "C3d2d4math7Segment__TQlTiVki2ZQu"
   },
   {
    "name" : "dSegment",
    "kind" : "alias",
    "line" : 142,
    "char" : 1,
    "deco" : "C3d2d4math7Segment__TQlTdVki2ZQu"
   },
   {
    "name" : "fSegment",
    "kind" : "alias",
    "line" : 143,
    "char" : 1,
    "deco" : "C3d2d4math7Segment__TQlTfVki2ZQu"
   },
   {
    "name" : "iBezierCurve",
    "kind" : "alias",
    "line" : 146,
    "char" : 1,
    "deco" : "C3d2d4math11BezierCurve__TQqTiVki2ZQz"
   },
   {
    "name" : "dBezierCurve",
    "kind" : "alias",
    "line" : 147,
    "char" : 1,
    "deco" : "C3d2d4math11BezierCurve__TQqTdVki2ZQz"
   },
   {
    "name" : "fBezierCurve",
    "kind" : "alias",
    "line" : 148,
    "char" : 1,
    "deco" : "C3d2d4math11BezierCurve__TQqTfVki2ZQz"
   }
  ]
 }
]